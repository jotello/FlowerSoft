"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveImportPathAndMain;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _escapeRegExp = _interopRequireDefault(require("lodash/escapeRegExp"));

var _FileUtils = _interopRequireDefault(require("./FileUtils"));

var _forwardSlashes = _interopRequireDefault(require("./forwardSlashes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findIndex(directory) {
  return ['index.js', 'index.jsx', 'index.ts', 'index.tsx'].find(function (indexFile) {
    return _fs.default.existsSync(_path.default.join(directory, indexFile));
  });
}

function resolveForPackage(filePath, workingDirectory) {
  if (!filePath.endsWith('/package.json')) {
    return null;
  }

  var json = _FileUtils.default.readJsonFile(_path.default.join(workingDirectory, filePath));

  if (!json) {
    return [null, null];
  }

  var mainFile = json.main;
  var match = filePath.match(/(.*)[\\/]package\.json/);

  if (!match) {
    return [null, null];
  }

  var matchPackage = match[1];

  if (!mainFile) {
    var indexFile = findIndex(_path.default.join(workingDirectory, matchPackage));

    if (!indexFile) {
      return [null, null];
    }

    mainFile = indexFile;
  }

  var mainFilePath = _path.default.join(workingDirectory, matchPackage, mainFile);

  if (_fs.default.existsSync(mainFilePath) && _fs.default.lstatSync(mainFilePath).isDirectory()) {
    // The main in package.json refers to a directory, so we want to
    // resolve it to an index file.
    var _indexFile = findIndex(mainFilePath);

    if (_indexFile) {
      mainFile += "/".concat(_indexFile);
    }
  }

  return [matchPackage, (0, _forwardSlashes.default)(_path.default.normalize(mainFile))];
}

function resolveImportPathAndMain(filePath, stripFileExtensions) {
  var workingDirectory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.cwd();
  var resolvedForPackage = resolveForPackage(filePath, workingDirectory);

  if (resolvedForPackage) {
    return resolvedForPackage;
  }

  var match = filePath.match(/(.*)\/(index\.[jt]s[^/]*)$/);

  if (match) {
    return [match[1], match[2]];
  }

  if (!stripFileExtensions) {
    return [filePath, null];
  }

  var extensions = stripFileExtensions.map(function (ext) {
    return (0, _escapeRegExp.default)(ext);
  });
  var importPath = filePath.replace(RegExp("(".concat(extensions.join('|'), ")$")), '');
  return [importPath, null];
}