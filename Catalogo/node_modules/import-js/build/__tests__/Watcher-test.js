"use strict";

var _ExportsStorage = _interopRequireDefault(require("../ExportsStorage"));

var _Watcher = _interopRequireDefault(require("../Watcher"));

var _findAllFiles = _interopRequireDefault(require("../findAllFiles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('../findAllFiles');
var testFile = {
  path: './foo/bar.js',
  mtime: 12345
};
describe('polling', function () {
  var watcher;
  var onFilesAdded;
  var onFilesRemoved;
  var storage;
  beforeEach(function () {
    _findAllFiles.default.mockImplementation(function () {
      return Promise.resolve([testFile]);
    });

    onFilesAdded = jest.fn(function () {
      return Promise.resolve();
    });
    onFilesRemoved = jest.fn(function () {
      return Promise.resolve();
    });
    storage = new _ExportsStorage.default();
    return storage.init(':memory:').then(function () {
      watcher = new _Watcher.default({
        storage: storage,
        onFilesAdded: onFilesAdded,
        onFilesRemoved: onFilesRemoved
      });
    });
  });
  it('adds new files', function () {
    return watcher.poll().then(function () {
      expect(onFilesAdded).toHaveBeenCalledWith([testFile]);
      expect(onFilesRemoved).toHaveBeenCalledWith([]);
    });
  });
  it('removes files that are dead', function () {
    return storage.update({
      names: [],
      defaultNames: [{
        name: 'bazgraz'
      }],
      pathToFile: './bazgraz.js',
      mtime: 1
    }).then(function () {
      return watcher.poll();
    }).then(function () {
      expect(onFilesRemoved).toHaveBeenCalledWith([{
        path: './bazgraz.js'
      }]);
    });
  });
  it('does not remove files inside node_modules', function () {
    return storage.update({
      names: [],
      defaultNames: [{
        name: 'bazgraz'
      }],
      pathToFile: './node_modules/bazgraz/index.js',
      mtime: 1
    }).then(function () {
      return watcher.poll();
    }).then(function () {
      expect(onFilesRemoved).toHaveBeenCalledWith([]);
    });
  });
});