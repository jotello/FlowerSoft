"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _FileUtils = _interopRequireDefault(require("../FileUtils"));

var _resolveImportPathAndMain = _interopRequireDefault(require("../resolveImportPathAndMain"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('fs');
jest.mock('../FileUtils');
describe('resolveImportPathAndMain()', function () {
  afterEach(function () {
    _fs.default.__reset();

    _FileUtils.default.__reset();
  });
  it('returns nulls when path ends with /package.json but does not exist', function () {
    expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual([null, null]);
  });
  describe('when the package.json does not have main', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/package.json'), {});
    });
    it('returns nulls', function () {
      expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual([null, null]);
    });
    describe('when there is an index.js', function () {
      beforeEach(function () {
        _fs.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/index.js'), '', {
          isDirectory: function isDirectory() {
            return false;
          }
        });
      });
      it('resolves to index.js', function () {
        expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual(['node_modules/foo', 'index.js']);
      });
    });
    describe('when there is an index.jsx', function () {
      beforeEach(function () {
        _fs.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/index.jsx'), '', {
          isDirectory: function isDirectory() {
            return false;
          }
        });
      });
      it('resolves to index.js', function () {
        expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual(['node_modules/foo', 'index.jsx']);
      });
    });
  });
  describe('when the package.json has a main file', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/package.json'), {
        main: 'main-file.js'
      });
    });
    it('returns the package path and the main file', function () {
      expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual(['node_modules/foo', 'main-file.js']);
    });
  });
  describe('when the package.json has a relative main file', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/package.json'), {
        main: './lib/main-file.js'
      });
    });
    it('returns the package path and the normalized main file', function () {
      expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual(['node_modules/foo', 'lib/main-file.js']);
    });
  });
  describe('when the package.json has a main directory', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/package.json'), {
        main: 'main-dir'
      });

      _fs.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/main-dir'), '', {
        isDirectory: function isDirectory() {
          return true;
        }
      });
    });
    describe('and the main directory has an index.js', function () {
      beforeEach(function () {
        _fs.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/main-dir/index.js'), '', {
          isDirectory: function isDirectory() {
            return false;
          }
        });
      });
      it('returns the package path and the main directory index.js', function () {
        expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual(['node_modules/foo', 'main-dir/index.js']);
      });
    });
    describe('and the main directory has an index.jsx', function () {
      beforeEach(function () {
        _fs.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/main-dir/index.jsx'), '', {
          isDirectory: function isDirectory() {
            return false;
          }
        });
      });
      it('returns the package path and the main directory index.jsx', function () {
        expect((0, _resolveImportPathAndMain.default)('node_modules/foo/package.json', [])).toEqual(['node_modules/foo', 'main-dir/index.jsx']);
      });
    });
  });
  it('returns directory path and index.js for paths ending in index.js', function () {
    expect((0, _resolveImportPathAndMain.default)('path/to/foo/index.js', [])).toEqual(['path/to/foo', 'index.js']);
  });
  it('returns directory path and index.jsx for paths ending in index.jsx', function () {
    expect((0, _resolveImportPathAndMain.default)('path/to/foo/index.jsx', [])).toEqual(['path/to/foo', 'index.jsx']);
  });
  it('returns file path for non-index js paths', function () {
    expect((0, _resolveImportPathAndMain.default)('path/to/foo.js', [])).toEqual(['path/to/foo.js', null]);
  });
  it('returns file path for non-index jsx paths', function () {
    expect((0, _resolveImportPathAndMain.default)('path/to/foo.jsx', [])).toEqual(['path/to/foo.jsx', null]);
  });
  it('can strip .js extensions', function () {
    expect((0, _resolveImportPathAndMain.default)('path/to/foo.js', ['.js', '.jsx'])).toEqual(['path/to/foo', null]);
  });
  it('can strip .jsx extensions', function () {
    expect((0, _resolveImportPathAndMain.default)('path/to/foo.jsx', ['.js', '.jsx'])).toEqual(['path/to/foo', null]);
  });
});