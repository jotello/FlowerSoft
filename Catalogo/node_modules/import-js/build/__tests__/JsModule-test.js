"use strict";

var _path = _interopRequireDefault(require("path"));

var _FileUtils = _interopRequireDefault(require("../FileUtils"));

var _JsModule = _interopRequireDefault(require("../JsModule"));

var _requireResolve = _interopRequireDefault(require("../requireResolve"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('../FileUtils');
jest.mock('../requireResolve');
describe('JsModule', function () {
  afterEach(function () {
    _FileUtils.default.__reset();

    _requireResolve.default.__reset();
  });
  it('does not modify relativeFilePath when it is .', function () {
    var relativeFilePath = '.';

    _JsModule.default.construct({
      relativeFilePath: relativeFilePath
    });

    expect(relativeFilePath).toEqual('.');
  });
  it('strips file extensions that are configured to be stripped', function () {
    var jsModule = _JsModule.default.construct({
      relativeFilePath: 'app/lib/foo.js',
      stripFileExtensions: ['.js', '.jsx']
    });

    expect(jsModule.importPath).toEqual('app/lib/foo');
  });
  it('strips double extensions', function () {
    var jsModule = _JsModule.default.construct({
      relativeFilePath: 'app/lib/foo.web.js',
      stripFileExtensions: ['.web.js']
    });

    expect(jsModule.importPath).toEqual('app/lib/foo');
  });
  it('does not strip parts of double extensions', function () {
    var jsModule = _JsModule.default.construct({
      relativeFilePath: 'app/lib/foo.js',
      stripFileExtensions: ['.web.js']
    });

    expect(jsModule.importPath).toEqual('app/lib/foo.js');
  });
  it('creates a valid JsModule when index.js is part of the name', function () {
    var jsModule = _JsModule.default.construct({
      relativeFilePath: 'lib/index.js/foo.js'
    });

    expect(jsModule.importPath).toEqual('lib/index.js/foo.js');
  });
  it('produces a correct path with a relative file in the same directory', function () {
    var jsModule = _JsModule.default.construct({
      makeRelativeTo: 'app/lib/bar.js',
      relativeFilePath: 'app/lib/foo.js'
    });

    expect(jsModule.importPath).toEqual('./foo.js');
  });
  it('produces a correct relative path when other file is in a parent directory', function () {
    var jsModule = _JsModule.default.construct({
      makeRelativeTo: 'app/bar.js',
      relativeFilePath: 'app/lib/foo.js'
    });

    expect(jsModule.importPath).toEqual('./lib/foo.js');
  });
  it('produces a correct relative path when other file is in a sibling directory', function () {
    var jsModule = _JsModule.default.construct({
      makeRelativeTo: 'app/foo/bar.js',
      relativeFilePath: 'app/lib/foo.js'
    });

    expect(jsModule.importPath).toEqual('../lib/foo.js');
  });
  it('has correct path when other file is in a child of a sibling directory', function () {
    var jsModule = _JsModule.default.construct({
      makeRelativeTo: 'app/foo/gas/bar.js',
      relativeFilePath: 'app/lib/foo.js'
    });

    expect(jsModule.importPath).toEqual('../../lib/foo.js');
  });
  describe('when relative file path has /package.json and a relative main', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/package.json'), {
        main: './lib/main-file.js'
      });
    });
    it('normalizes filePath', function () {
      var jsModule = _JsModule.default.construct({
        relativeFilePath: 'node_modules/foo/package.json'
      });

      expect(jsModule.filePath).toEqual('node_modules/foo/lib/main-file.js');
    });
  });
  describe('.resolvedFilePath()', function () {
    describe('when relative file path has /package.json', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'node_modules/foo/package.json'), {
          main: 'main-file.js'
        });
      });
      it('replaces /package.json at the end with the main file', function () {
        var jsModule = _JsModule.default.construct({
          relativeFilePath: 'node_modules/foo/package.json'
        });

        expect(jsModule.resolvedFilePath('/path/to/file')).toEqual('node_modules/foo/main-file.js');
      });
      it('does not replace /package.json in the middle', function () {
        var jsModule = _JsModule.default.construct({
          relativeFilePath: 'node_modules/foo/package.json/bar'
        });

        expect(jsModule.resolvedFilePath('/path/to/file')).toEqual('node_modules/foo/package.json/bar');
      });
    });
    it('makes ./ paths relative to the current file', function () {
      var jsModule = new _JsModule.default({
        importPath: './index.scss'
      });
      expect(jsModule.resolvedFilePath('/path/to/file')).toEqual('/path/to/index.scss');
    });
    it('makes ../ paths relative to the current file', function () {
      var jsModule = new _JsModule.default({
        importPath: '../index.scss'
      });
      expect(jsModule.resolvedFilePath('/path/to/file')).toEqual('/path/index.scss');
    });
    describe('when the import path is a package', function () {
      beforeEach(function () {
        _requireResolve.default.__addResolvedPath(_path.default.join(process.cwd(), 'my-package'), _path.default.join(process.cwd(), 'node_modules/my-package/main-file.js'));
      });
      it('uses the resolved file', function () {
        var jsModule = new _JsModule.default({
          importPath: 'my-package'
        });
        expect(jsModule.resolvedFilePath('/path/to/file')).toEqual(_path.default.join(process.cwd(), 'node_modules/my-package/main-file.js'));
      });
    });
    it('does nothing to the path when it is not a package', function () {
      var jsModule = new _JsModule.default({
        importPath: 'my-package'
      });
      expect(jsModule.resolvedFilePath('/path/to/file')).toEqual(_path.default.join(process.cwd(), 'node_modules/my-package'));
    });
  });
});