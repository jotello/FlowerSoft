"use strict";

var _path = _interopRequireDefault(require("path"));

var _findUndefinedIdentifiers = _interopRequireDefault(require("../findUndefinedIdentifiers"));

var _parse = _interopRequireDefault(require("../parse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var local = function local(subPath) {
  return _path.default.resolve(__dirname, subPath);
};

it('finds all undefined identifiers', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    const foo = 'foo';\n    foo();\n    bar();\n  ", local('foo.js')))).toEqual(new Set(['bar']));
});
it('recognizes multi-assignment', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    const foo = 'foo', bar = 'bar';\n    foo();\n    bar();\n  ", local('foo.js')))).toEqual(new Set([]));
});
it('recognizes destructured assignment', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    import Foo from 'foo';\n    const { bar } = Foo;\n    bar();\n  ", local('foo.js')))).toEqual(new Set([]));
});
it('recognizes destructured assignment to a new name', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    import Foo from 'foo';\n    const { bar: scar } = Foo;\n    scar();\n  ", local('foo.js')))).toEqual(new Set([]));
});
it('knows about scope', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    () => {\n      const foo = 'foo';\n      foo();\n      bar.flar.nie();\n      class Flan {}\n    };\n    class Bar {\n      constructor() {\n        foo();\n      }\n    }\n    new Flan();\n  ", local('foo.js')))).toEqual(new Set(['Flan', 'bar', 'foo']));
});
it('knows about dynamic keys', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    const foo = {\n      [bar]: 'yes',\n    };\n  ", local('foo.js')))).toEqual(new Set(['bar']));
});
it('knows about jsx', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    export default <FooBar foo={bar} />;\n  ", local('foo.jsx')))).toEqual(new Set(['bar', 'React', // Implicit dependency
  'FooBar']));
});
it('ignores lowercase jsx element identifiers', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("export default <input value='foo' />;", local('foo.jsx')))).toEqual(new Set(['React']));
});
it('knows about methods inside jsx', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    <FooBar foo={(gar, car) => gar() + car()} />\n  ", local('foo.jsx')))).toEqual(new Set(['React', // Implicit dependency
  'FooBar']));
});
it('knows about using an unconventional opening jsx tag', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    <FooBar.Tar />\n  ", local('foo.jsx')))).toEqual(new Set(['React', // Implicit dependency
  'FooBar']));
});
it('knows about fragment empty tag jsx syntax', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    <FooBar><>{foo}</></FooBar>\n  ", local('foo.jsx')))).toEqual(new Set(['React', // Implicit dependency
  'FooBar', 'foo']));
});
it('knows about binary expression trees', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    var a = foo + bar;\n  ", local('foo.js')))).toEqual(new Set(['foo', 'bar']));
});
it('knows about nested binary expression trees', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    var a = foo + bar + baz;\n  ", local('foo.js')))).toEqual(new Set(['foo', 'bar', 'baz']));
});
it('knows about namespace imports', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    import * as api from './api'\n\n    api.get();\n  ", local('foo.js')))).toEqual(new Set([]));
});
it('knows about objects', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    foo({\n      bar() {},\n      baz: 12,\n      uuid: uuid.v4(),\n    });\n  ", local('foo.js')))).toEqual(new Set(['foo', 'uuid']));
});
it('knows about default parameters', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    foo({\n      bar(a = 123) {},\n    });\n\n    function x(b = 456) {}\n  ", local('foo.js')))).toEqual(new Set(['foo']));
});
it('knows about array destructuring', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    const [a] = []\n\n    function foo([b]) {}\n  ", local('foo.js')))).toEqual(new Set([]));
});
it('finds variables in export declarations', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    const test = {};\n    export { test as react };\n    export { foo as bar };\n  ", local('foo.js')))).toEqual(new Set(['foo']));
});
it('knows about identifiers declared after usage', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    function modifyAbc() {\n      abc.def = 4;\n    }\n\n    export const abc = {};\n  ", local('foo.js')))).toEqual(new Set([]));
});
it('knows about hoisting', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    hoistedFunction();\n    hoistedVariable.foo();\n    new HoistedClass();\n    hoistedImport.bar();\n\n    function hoistedFunction() {}\n    var hoistedVariable = { foo: () => null };\n    class HoistedClass {}\n    import hoistedImport from 'hoisterImport';\n  ", local('foo.js')))).toEqual(new Set([]));
});
it('handles es6 imports + commonjs + react', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    import React from 'react';\n    import Button from '../button';\n    import { Card } from 'card';\n\n    const CardButton = themed(React.createClass({\n      componentWillMount() {\n        $.get('/api/users/1');\n      },\n      render() {\n        const themed = true;\n        return (\n          <Card themed={themed}>\n            <CardHeader>\n              {this.props.header}\n            </CardHeader>\n            <Button disabled={this.props.disabled}>\n              {this.props.buttonLabel}\n            </Button>\n          </Card>\n        );\n      }\n    }));\n    module.exports = CardButton;\n  ", local('foo.jsx')), ['module'])).toEqual(new Set(['themed', '$', 'CardHeader']));
});
it('knows about object rest', function () {
  expect((0, _findUndefinedIdentifiers.default)((0, _parse.default)("\n    let someObject = {};\n    const { a, ...theRest } = someObject;\n  "))).toEqual(new Set([]));
});