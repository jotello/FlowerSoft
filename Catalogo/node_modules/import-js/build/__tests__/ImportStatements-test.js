"use strict";

var _path = _interopRequireDefault(require("path"));

var _Configuration = _interopRequireDefault(require("../Configuration"));

var _FileUtils = _interopRequireDefault(require("../FileUtils"));

var _ImportStatements = _interopRequireDefault(require("../ImportStatements"));

var _findCurrentImports = _interopRequireDefault(require("../findCurrentImports"));

var _parse = _interopRequireDefault(require("../parse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var local = function local(subPath) {
  return _path.default.resolve(__dirname, subPath);
};

jest.mock('../FileUtils');

function prepare(importString) {
  return (0, _findCurrentImports.default)(new _Configuration.default(), importString, (0, _parse.default)(importString, local('foo.js'))).imports;
}

describe('ImportStatements', function () {
  afterEach(function () {
    _FileUtils.default.__reset();
  });
  it('gives an empty array without any import statements', function () {
    var statements = new _ImportStatements.default(new _Configuration.default());
    expect(statements.toArray()).toEqual([]);
  });
  it('returns the pushed import statement', function () {
    var statements = prepare("import foo from 'foo';");
    expect(statements.toArray()).toEqual(["import foo from 'foo';"]);
  });
  it('returns all of the pushed import statements', function () {
    var statements = prepare("\n      import foo from 'foo';\n      import bar from 'bar';\n    ");
    expect(statements.toArray()).toEqual(["import bar from 'bar';", "import foo from 'foo';"]);
  });
  it('returns one statement when pushed two identical statements', function () {
    var statements = prepare("\n      import foo from 'foo';\n      import foo from 'foo';\n    ");
    expect(statements.toArray()).toEqual(["import foo from 'foo';"]);
  });
  it('returns sorted in same group when pushed two of the same kind', function () {
    var statements = prepare("\n      import foo from 'foo';\n      import bar from 'bar';\n    ");
    expect(statements.toArray()).toEqual(["import bar from 'bar';", "import foo from 'foo';"]);
  });
  it('merges statements of different kinds with identical paths', function () {
    var statements = prepare("\n      import foo from 'foo';\n      import { bar } from 'foo';\n    ");
    expect(statements.toArray()).toEqual(["import foo, { bar } from 'foo';"]);
  });
  it('separates import and const', function () {
    var statements = prepare("\n      import foo from 'foo';\n      const bar = require('bar');\n    ");
    expect(statements.toArray()).toEqual(["import foo from 'foo';", '', "const bar = require('bar');"]);
  });
  describe('with a package dependency', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'package.json'), {
        dependencies: {
          bar: '1.0.0'
        }
      });
    });
    it('separates package dependencies from non-package dependencies', function () {
      var statements = prepare("\n        import foo from 'foo';\n        import bar from 'bar';\n      ");
      expect(statements.toArray()).toEqual(["import bar from 'bar';", '', "import foo from 'foo';"]);
    });
    it('separates package-local dependencies from non-package dependencies', function () {
      var statements = prepare("\n        import foo from 'foo';\n        import bar from 'bar/too/far';\n      ");
      expect(statements.toArray()).toEqual(["import bar from 'bar/too/far';", '', "import foo from 'foo';"]);
    });
    describe('with a meteor environment', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['meteor'],
          packageDependencies: new Set(['meteor/bar'])
        });
      });
      it('separates packages from core modules', function () {
        var statements = prepare("\n          import { Meteor } from 'meteor/meteor';\n          import bar from 'bar';\n        ");
        expect(statements.toArray()).toEqual(["import { Meteor } from 'meteor/meteor';", '', "import bar from 'bar';"]);
      });
      it('separates core modules from things that look like core modules', function () {
        var statements = prepare("\n          import { Meteor } from 'meteor/meteor';\n          import { SimpleSchema } from 'meteor/aldeed:simple-schema';\n        ");
        expect(statements.toArray()).toEqual(["import { Meteor } from 'meteor/meteor';", '', "import { SimpleSchema } from 'meteor/aldeed:simple-schema';"]);
      });
      it('separates package dependencies from non-package dependencies', function () {
        var statements = prepare("\n          import foo from 'foo';\n          import bar from 'meteor/bar';\n        ");
        expect(statements.toArray()).toEqual(["import bar from 'meteor/bar';", '', "import foo from 'foo';"]);
      });
      it('separates package module dependencies from non-package dependencies', function () {
        var statements = prepare("\n          import foo from 'foo';\n          import bar from 'meteor/bar/too/far';\n        ");
        expect(statements.toArray()).toEqual(["import bar from 'meteor/bar/too/far';", '', "import foo from 'foo';"]);
      });
    });
    describe('with a node environment', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['node']
        });
      });
      it('separates packages from core modules', function () {
        var statements = prepare("\n          import readline from 'readline';\n          import bar from 'bar';\n        ");
        expect(statements.toArray()).toEqual(["import readline from 'readline';", '', "import bar from 'bar';"]);
      });
      it('separates core modules from things that look like core modules', function () {
        var statements = prepare("\n          import constants from 'constants';\n          import AppConstants from 'constants/app_constants';\n        ");
        expect(statements.toArray()).toEqual(["import constants from 'constants';", '', "import AppConstants from 'constants/app_constants';"]);
      });
    });
  });
  it('separates import statements with different styles', function () {
    var statements = prepare("\n      const bar = require('bar');\n      const custom = custom('custom');\n      import foo from 'foo';\n      var baz = require('baz');\n    ");
    expect(statements.toArray()).toEqual(["import foo from 'foo';", '', "const bar = require('bar');", '', "var baz = require('baz');", '', "const custom = custom('custom');"]);
  });
  describe('when groupImports is false', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
        groupImports: false
      });
    });
    it('does not separate statements of different kinds', function () {
      var statements = prepare("\n        const bar = require('bar');\n        const custom = custom('custom');\n        import foo from 'foo';\n        var baz = require('baz');\n      ");
      expect(statements.toArray()).toEqual(["const bar = require('bar');", "var baz = require('baz');", "const custom = custom('custom');", "import foo from 'foo';"]);
    });
  });
  describe('when sortImports is false', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
        sortImports: false
      });
    });
    it('does not sort statements', function () {
      var statements = prepare("\n        import foo from 'foo';\n        import bar from 'bar';\n      ");
      expect(statements.toArray()).toEqual(["import foo from 'foo';", "import bar from 'bar';"]);
    });
  });
  describe('.deleteVariables()', function () {
    it('removes empty import statements when deleting default imports', function () {
      var statements = prepare("\n        import foo from './lib/foo'\n      ");
      statements.deleteVariables(['foo']);
      expect(statements.toArray()).toEqual([]);
    });
    it('removes empty import statements when deleting named imports', function () {
      var statements = prepare("\n        import { foo } from './lib/foo'\n      ");
      statements.deleteVariables(['foo']);
      expect(statements.toArray()).toEqual([]);
    });
    it('does not remove non-empty statements when deleting named imports', function () {
      var statements = prepare("\n        import { foo, bar } from './lib/foo'\n      ");
      statements.deleteVariables(['foo']);
      expect(statements.toArray()).toEqual(["import { bar } from './lib/foo';"]);
    });
    it('does not remove non-empty statements when deleting default imports', function () {
      var statements = prepare("\n        import foo, { bar } from './lib/foo'\n      ");
      statements.deleteVariables(['foo']);
      expect(statements.toArray()).toEqual(["import { bar } from './lib/foo';"]);
    });
    it('does not alter local names for named imports', function () {
      var statements = prepare("\n        import foo, { bar as far } from './lib/foo'\n      ");
      statements.deleteVariables(['foo']);
      expect(statements.toArray()).toEqual(["import { bar as far } from './lib/foo';"]);
      statements.deleteVariables(['far']);
      expect(statements.toArray()).toEqual([]);
    });
    it('removes empty statements when deleting default and named imports', function () {
      var statements = prepare("\n        import foo, { bar } from './lib/foo'\n      ");
      statements.deleteVariables(['foo', 'bar']);
      expect(statements.toArray()).toEqual([]);
    });
  });
});