"use strict";

var _ExportsStorage = _interopRequireDefault(require("../ExportsStorage"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var subject;
beforeEach(function () {
  subject = new _ExportsStorage.default(process.cwd());
  return subject.init(':memory:');
});
afterEach(function () {
  return subject.close();
});
it('can add default exports', function () {
  return subject.update({
    names: [],
    defaultNames: [{
      name: 'foo'
    }],
    pathToFile: './lib/foo.js',
    mtime: 1
  }).then(function () {
    return subject.get('Foo').then(function (rows) {
      expect(rows.length).toEqual(1);
      expect(rows[0].path).toEqual('./lib/foo.js');
      expect(rows[0].name).toEqual('foo');
      expect(rows[0].isDefault).toEqual(true);
    });
  });
});
it('can search for modules', function () {
  Promise.all([subject.update({
    names: ['Foo'],
    pathToFile: './lib/Foo.js',
    defaultNames: [],
    mtime: 1
  }), subject.update({
    names: ['Bar'],
    pathToFile: './lib/Bar.js',
    defaultNames: [],
    mtime: 1
  }), subject.update({
    types: ['BarType'],
    pathToFile: './types/Bar.js',
    defaultNames: [],
    mtime: 1
  }), subject.update({
    names: [],
    pathToFile: './lib/BarBar.js',
    defaultNames: [{
      name: 'barbar'
    }],
    mtime: 1
  })]).then(function () {
    return subject.search('bar*').then(function (rows) {
      expect(rows.length).toEqual(3);
      rows.sort(function (left, right) {
        return left.name.localeCompare(right.name);
      });
      expect(rows[0].path).toEqual('./lib/Bar.js');
      expect(rows[0].name).toEqual('Bar');
      expect(rows[1].path).toEqual('./lib/BarBar.js');
      expect(rows[1].name).toEqual('barbar');
      expect(rows[2].path).toEqual('./types/Bar.js');
      expect(rows[2].name).toEqual('BarType');
      expect(rows[2].isType).toBeTruthy();
    });
  });
});
it('can add non-default exports', function () {
  return subject.update({
    names: ['Bar'],
    pathToFile: './lib/something.js',
    defaultNames: [],
    mtime: 1
  }).then(function () {
    return subject.get('Bar').then(function (rows) {
      expect(rows.length).toEqual(1);
      expect(rows[0].path).toEqual('./lib/something.js');
      expect(rows[0].name).toEqual('Bar');
      expect(rows[0].isDefault).toEqual(false);
    });
  });
});
it('can remove entries', function () {
  return subject.update({
    names: ['Bar'],
    pathToFile: './lib/something.js',
    defaultNames: [],
    mtime: 1
  }).then(function () {
    return subject.remove('./lib/something.js').then(function () {
      return subject.get('Bar').then(function (rows) {
        expect(rows.length).toEqual(0);
      });
    });
  });
});
it('can remove entries based on a glob pattern', function () {
  return Promise.all([subject.update({
    names: ['Bar'],
    pathToFile: './lib/something/foo/Bar.js',
    defaultNames: [],
    mtime: 1
  }), subject.update({
    names: ['Foo'],
    pathToFile: './app/Foo.js',
    defaultNames: [],
    mtime: 1
  })]).then(function () {
    return subject.removeAll('./lib/**/*.js').then(function () {
      return subject.get('Bar').then(function (rows) {
        expect(rows.length).toEqual(0);
      }).then(function () {
        return subject.get('Foo').then(function (rows) {
          expect(rows.length).toEqual(1);
        });
      });
    });
  });
});
it('removes old entries on update', function () {
  return subject.update({
    names: ['foo', 'Bar'],
    defaultNames: [{
      name: 'bazgraz'
    }],
    pathToFile: './bazgraz.js',
    mtime: 1
  }).then(function () {
    return subject.get('Bar').then(function (rows) {
      expect(rows.length).toEqual(1);
      return subject.update({
        names: ['foo'],
        defaultNames: [{
          name: 'bazgraz'
        }],
        pathToFile: './bazgraz.js'
      }).then(function () {
        return subject.get('Bar').then(function (rows) {
          expect(rows.length).toEqual(0);
        });
      });
    });
  });
});
it('can check a lot of files if they need updating', function () {
  var files = [];

  for (var i = 0; i < 1000; i += 1) {
    files.push({
      path: "./foo-".concat(i, ".js"),
      mtime: i
    });
  }

  return subject.needsUpdate(files).then(function (needsUpdate) {
    expect(needsUpdate.length).toEqual(1000);
  });
});
it('can purge dead node_modules', function (done) {
  Promise.all([subject.update({
    names: ['deasync'],
    pathToFile: './node_modules/deasync/index.js',
    defaultNames: [],
    mtime: 1
  }), subject.update({
    names: [],
    pathToFile: '../../node_modules/foo/index.js',
    defaultNames: [{
      name: 'Foo'
    }],
    mtime: 1
  })]).then(function () {
    return subject.purgeDeadNodeModules(process.cwd());
  }).then(function () {
    subject.get('deasync').then(function (rows) {
      expect(rows.length).toEqual(1);
    }).then(function () {
      return subject.get('Foo').then(function (rows) {
        expect(rows.length).toEqual(0);
        done();
      });
    });
  });
});