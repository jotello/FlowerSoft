"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _requireRelative = _interopRequireDefault(require("require-relative"));

var _globals = _interopRequireDefault(require("globals"));

var _Configuration = _interopRequireDefault(require("../Configuration"));

var _FileUtils = _interopRequireDefault(require("../FileUtils"));

var _version = _interopRequireDefault(require("../version"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

jest.mock('../FileUtils');
jest.mock('../version');
jest.mock('fs');
jest.mock('require-relative');
describe('Configuration', function () {
  afterEach(function () {
    _fs.default.__reset();

    _FileUtils.default.__reset();

    _version.default.__reset();
  });
  describe('with camelCased configuration', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
        declarationKeyword: 'const'
      });
    });
    it('does not have any messages', function () {
      var configuration = new _Configuration.default();
      expect(configuration.messages).toEqual([]);
    });
  });
  describe('with unknown configuration', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
        somethingStrange: true
      });
    });
    it('has a message about unknown configuration', function () {
      var configuration = new _Configuration.default();
      expect(configuration.messages).toEqual(['Unknown configuration: `somethingStrange`']);
    });
  });
  describe('#get()', function () {
    it('has default values', function () {
      var configuration = new _Configuration.default();
      expect(configuration.get('aliases')).toEqual({});
      expect(configuration.get('declarationKeyword')).toEqual('import');
      expect(configuration.get('groupImports')).toEqual(true);
      expect(configuration.get('sortImports')).toEqual(true);
      expect(configuration.get('importDevDependencies')).toEqual(false);
      expect(configuration.get('importFunction')).toEqual('require');
      expect(configuration.get('stripFileExtensions')).toEqual(['.js', '.jsx', '.ts', '.tsx']);
      expect(configuration.get('useRelativePaths')).toEqual(true);
      expect(configuration.get('maxLineLength')).toEqual(80);
      expect(configuration.get('tab')).toEqual('  ');
      expect(configuration.get('logLevel')).toEqual('info');
      expect(configuration.get('mergableOptions')).toEqual({
        aliases: true,
        coreModules: true,
        namedExports: true,
        globals: true
      });
    });
    describe('with a JSON configuration file', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.json'), {
          aliases: {
            foo: 'bar'
          },
          declarationKeyword: 'const'
        });
      });
      it('returns the configured value for the key', function () {
        expect(new _Configuration.default().get('aliases')).toEqual({
          foo: 'bar'
        });
      });
      it('has a deprecation message', function () {
        var configuration = new _Configuration.default();
        expect(configuration.messages).toEqual(['Using JSON to configure ImportJS is deprecated and will go away ' + 'in a future version. Use an `.importjs.js` file instead.']);
      });
      describe('and a javascript configuration file', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            aliases: {
              bar: 'foo'
            }
          });
        });
        it('prefers the javascript file', function () {
          expect(new _Configuration.default().get('aliases')).toEqual({
            bar: 'foo'
          });
        });
      });
    });
    describe('with a javascript configuration file in home directory', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(_os.default.homedir(), '.importjs.js'), {
          declarationKeyword: 'const'
        });
      });
      it('returns the configured value for the key', function () {
        expect(new _Configuration.default().get('declarationKeyword')).toEqual('const');
      });
      describe('and a project javascript configuration file', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            declarationKeyword: 'import'
          });
        });
        it('prefers project file', function () {
          expect(new _Configuration.default().get('declarationKeyword')).toEqual('import');
        });
      });
    });
    describe('with a javascript configuration file', function () {
      describe('that will not parse', function () {
        beforeEach(function () {
          spyOn(_FileUtils.default, 'readJsFile').and.throwError('Syntax error');
        });
        it('has a message about the failure', function () {
          var configuration = new _Configuration.default();
          expect(configuration.messages[0]).toMatch(/Unable to parse configuration file/);
        });
      });
      describe('that does not export anything', function () {
        beforeEach(function () {
          // This is what the built-in `require` method will do if a javascript
          // file doesn't export anything.
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {});
        });
        it('has a message about the failure', function () {
          var configuration = new _Configuration.default();
          expect(configuration.messages[0]).toMatch(/Nothing exported from \.importjs\.js/);
        });
      });
    });
    describe('with a minimumVersion', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          minimumVersion: '1.2.3'
        });
      });
      it('does not throw an error when current version is newer', function () {
        _version.default.__setVersion('1.2.3');

        expect(function () {
          return new _Configuration.default();
        }).not.toThrow();
      });
      it('throws an error when current version is older', function () {
        _version.default.__setVersion('1.2.2');

        expect(function () {
          return new _Configuration.default();
        }).toThrow(new Error('The configuration file for this project requires version ' + '1.2.3 or newer. You are using 1.2.2.'));
      });
    });
    describe('with a configuration option that is a function', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          declarationKeyword: function declarationKeyword(_ref) {
            var pathToImportedModule = _ref.pathToImportedModule,
                pathToCurrentFile = _ref.pathToCurrentFile;

            if (/test\.js/.test(pathToImportedModule)) {
              return 'var';
            }

            if (/test\.js/.test(pathToCurrentFile)) {
              return 'const';
            }

            return 'import';
          }
        });
      });
      describe('when using `pathToImportedModule`', function () {
        it('invokes the method and returns the right value', function () {
          var configuration = new _Configuration.default('/foo/component.js');
          expect(configuration.get('declarationKeyword', {
            pathToImportedModule: '/foo/test.js'
          })).toEqual('var');
        });
      });
      describe('when using `pathToCurrentFile`', function () {
        it('invokes the method and returns the right value', function () {
          var configuration = new _Configuration.default('/foo/test.js');
          expect(configuration.get('declarationKeyword', {
            pathToImportedModule: '/component.js'
          })).toEqual('const');
        });
      });
      describe('when using none of the paths', function () {
        it('invokes the method and returns the right value', function () {
          var configuration = new _Configuration.default('/foo/bar.js');
          expect(configuration.get('declarationKeyword', {
            pathToImportedModule: '/bar/foo.js'
          })).toEqual('import');
        });
      });
    });
  });
  describe('#get aliases', function () {
    it('returns an empty object', function () {
      expect(new _Configuration.default().get('aliases')).toEqual({});
    });
    describe('with a javascript configuration file', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          aliases: {
            foo: 'bar'
          }
        });
      });
      it('returns the configured value for the key', function () {
        expect(new _Configuration.default().get('aliases')).toEqual({
          foo: 'bar'
        });
      });
    });
  });
  describe('#get coreModules', function () {
    it('returns an empty array', function () {
      expect(new _Configuration.default().get('coreModules')).toEqual([]);
    });
    describe('in a meteor environment', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['meteor']
        });
      });
      it('returns meteor core modules', function () {
        expect(new _Configuration.default().get('coreModules')).toEqual(['meteor/accounts-base', 'meteor/blaze', 'meteor/check', 'meteor/ddp-client', 'meteor/ddp-rate-limiter', 'meteor/ejson', 'meteor/email', 'meteor/http', 'meteor/check', 'meteor/meteor', 'meteor/mongo', 'meteor/random', 'meteor/reactive-var', 'meteor/session', 'meteor/templating', 'meteor/tracker']);
      });
      describe('with user defined coreModules', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            environments: ['meteor'],
            coreModules: ['FOO', 'bar']
          });
        });
        it('merges user and meteor core modules', function () {
          expect(new _Configuration.default().get('coreModules')).toEqual(['FOO', 'bar', 'meteor/accounts-base', 'meteor/blaze', 'meteor/check', 'meteor/ddp-client', 'meteor/ddp-rate-limiter', 'meteor/ejson', 'meteor/email', 'meteor/http', 'meteor/check', 'meteor/meteor', 'meteor/mongo', 'meteor/random', 'meteor/reactive-var', 'meteor/session', 'meteor/templating', 'meteor/tracker']);
        });
        describe('with mergableOptions.coreModules set to false', function () {
          beforeEach(function () {
            _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
              environments: ['meteor'],
              coreModules: ['FOO', 'bar'],
              mergableOptions: {
                coreModules: false
              }
            });
          });
          it('returns only user coreModules', function () {
            expect(new _Configuration.default().get('coreModules')).toEqual(['FOO', 'bar']);
          });
        });
      });
    });
    describe('in a node environment', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['node']
        });
      });
      it('returns node core modules', function () {
        expect(new _Configuration.default().get('coreModules')).toEqual(['assert', 'buffer', 'child_process', 'cluster', 'console', 'constants', 'crypto', 'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'https', 'module', 'net', 'os', 'path', 'punycode', 'querystring', 'readline', 'repl', 'stream', 'string_decoder', 'sys', 'timers', 'tls', 'tty', 'url', 'util', 'v8', 'vm', 'zlib']);
      });
    });
    describe('in multiple environments', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['node', 'meteor']
        });
      });
      it('returns core modules from all environments', function () {
        var coreModules = new _Configuration.default().get('coreModules');
        expect(coreModules).toContain('child_process');
        expect(coreModules).toContain('meteor/check');
      });
    });
  });
  describe('#get globals', function () {
    it('returns javascript builtins', function () {
      expect(new _Configuration.default().get('globals')).toEqual(Object.keys(_globals.default.builtin));
    });
    describe('with a javascript configuration file', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          globals: ['FOO', 'Bar']
        });
      });
      it('returns the configured value merged with defaults', function () {
        expect(new _Configuration.default().get('globals')).toEqual(['FOO', 'Bar'].concat(_toConsumableArray(Object.keys(_globals.default.builtin))));
      });
    });
    describe('in a meteor environment', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['meteor']
        });
      });
      it('returns meteor globals', function () {
        var ourGlobals = new _Configuration.default().get('globals');
        expect(ourGlobals).toEqual(_toConsumableArray(Object.keys(_globals.default.builtin)).concat(_toConsumableArray(Object.keys(_globals.default.meteor))));
        expect(ourGlobals).toContain('Meteor');
        expect(ourGlobals).toContain('Package');
      });
      describe('with user defined globals', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            environments: ['meteor'],
            globals: ['FOO', 'bar']
          });
        });
        it('merges user, meteor and default globals', function () {
          expect(new _Configuration.default().get('globals')).toEqual(['FOO', 'bar'].concat(_toConsumableArray(Object.keys(_globals.default.builtin)), _toConsumableArray(Object.keys(_globals.default.meteor))));
        });
        describe('with mergableOptions.globals set to false', function () {
          beforeEach(function () {
            _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
              environments: ['meteor'],
              globals: ['FOO', 'bar'],
              mergableOptions: {
                globals: false
              }
            });
          });
          it('returns only user globals', function () {
            expect(new _Configuration.default().get('globals')).toEqual(['FOO', 'bar']);
          });
        });
      });
    });
    describe('in a node environment', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['node']
        });
      });
      it('returns node globals', function () {
        var ourGlobals = new _Configuration.default().get('globals');
        expect(ourGlobals).toEqual(_toConsumableArray(Object.keys(_globals.default.builtin)).concat(_toConsumableArray(Object.keys(_globals.default.node))));
        expect(ourGlobals).toContain('process');
        expect(ourGlobals).toContain('__dirname');
        expect(ourGlobals).toContain('setImmediate');
      });
    });
    describe('in multiple environments', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['node', 'meteor']
        });
      });
      it('returns globals all environments', function () {
        var ourGlobals = new _Configuration.default().get('globals');
        expect(ourGlobals).toEqual(_toConsumableArray(Object.keys(_globals.default.builtin)).concat(_toConsumableArray(Object.keys(_globals.default.node)), _toConsumableArray(Object.keys(_globals.default.meteor))));
        expect(ourGlobals).toContain('Meteor');
        expect(ourGlobals).toContain('Package');
        expect(ourGlobals).toContain('process');
        expect(ourGlobals).toContain('__dirname');
        expect(ourGlobals).toContain('setImmediate');
      });
    });
  });
  describe('#get moduleSideEffectImports', function () {
    describe('in meteor environment', function () {
      describe('with no side-effect imports for a component', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            useRelativePaths: true,
            environments: ['meteor']
          });
        });
        it('finds no side-effect imports for components', function () {
          var configuration = new _Configuration.default('./foo/component.js');
          expect(configuration.get('moduleSideEffectImports').sort()).toEqual([]);
        });
      });
      describe('with useRelativePaths true', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            useRelativePaths: true,
            environments: ['meteor']
          });

          _fs.default.__setFile(_path.default.join(process.cwd(), 'foo', 'component.css'), '', {
            isDirectory: function isDirectory() {
              return false;
            }
          });

          _fs.default.__setFile(_path.default.join(process.cwd(), 'foo', 'component.html'), '', {
            isDirectory: function isDirectory() {
              return false;
            }
          });
        });
        it('finds side-effect imports for components and gives them relative paths', function () {
          var configuration = new _Configuration.default('./foo/component.js');
          expect(configuration.get('moduleSideEffectImports').sort()).toEqual(['./component.css', './component.html']);
        });
        it('finds side-effect imports for components related to jsx modules', function () {
          var configuration = new _Configuration.default('./foo/component.jsx');
          expect(configuration.get('moduleSideEffectImports').sort()).toEqual(['./component.css', './component.html']);
        });
        it('returns no side-effect imports for components related to unknown module types', function () {
          var configuration = new _Configuration.default('./foo/component.unk');
          expect(configuration.get('moduleSideEffectImports').sort()).toEqual([]);
        });
      });
      describe('with useRelativePaths false', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            useRelativePaths: false,
            environments: ['meteor']
          });

          _fs.default.__setFile(_path.default.join(process.cwd(), 'foo', 'component.css'), '', {
            isDirectory: function isDirectory() {
              return false;
            }
          });

          _fs.default.__setFile(_path.default.join(process.cwd(), 'foo', 'component.html'), '', {
            isDirectory: function isDirectory() {
              return false;
            }
          });
        });
        it('finds side-effect imports for components and gives them absolute paths', function () {
          var configuration = new _Configuration.default('./foo/component.js');
          expect(configuration.get('moduleSideEffectImports').sort()).toEqual(['/foo/component.css', '/foo/component.html']);
        });
      });
    });
  });
  describe('#get namedExports from meteor environment', function () {
    beforeEach(function () {
      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
        environments: ['meteor']
      });

      _fs.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'packages'), "\njohn:foo\njane:bar\njohn:foobar\njane:barbaz\n        ".trim(), {
        isDirectory: function isDirectory() {
          return false;
        }
      });

      _fs.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'versions'), "\njohn:foo@1.0.0\njane:bar@0.0.1\njohn:foobar@1.0.0\njane:barbaz@0.0.1\n        ".trim(), {
        isDirectory: function isDirectory() {
          return false;
        }
      });

      _FileUtils.default.__setFile(_path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foo', '1.0.0', 'isopack.json'), {
        name: 'foo',
        summary: 'Metasyntactic package name #1',
        version: '1.0.0',
        isTest: false,
        'isopack-2': {
          builds: [{
            kind: 'main',
            arch: 'os',
            path: 'os.json'
          }]
        }
      });

      _FileUtils.default.__setFile(_path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foo', '1.0.0', 'os.json'), {
        format: 'isopack-2-unibuild',
        declaredExports: [{
          name: 'foosball',
          testOnly: false
        }]
      });

      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_bar', 'isopack.json'), {
        name: 'bar',
        summary: 'Metasyntactic package name #2',
        version: '0.0.1',
        isTest: false,
        'isopack-2': {
          builds: [{
            kind: 'main',
            arch: 'os',
            path: 'os.json'
          }]
        }
      });

      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_bar', 'os.json'), {
        format: 'isopack-2-unibuild',
        declaredExports: [{
          name: 'barsketball',
          testOnly: false
        }]
      }); // Atmosphere package john:foobar files


      _FileUtils.default.__setFile(_path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foobar', '1.0.0', 'isopack.json'), {
        name: 'foobar',
        summary: 'Metasyntactic package name #3',
        version: '1.0.0',
        isTest: false,
        'isopack-2': {
          builds: [{
            kind: 'main',
            arch: 'os',
            path: 'os.json'
          }]
        }
      });

      _FileUtils.default.__setFile(_path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foobar', '1.0.0', 'os.json'), {
        format: 'isopack-2-unibuild',
        declaredExports: [],
        resources: [{
          type: 'source',
          extension: 'js',
          file: 'os/check-npm-versions.js',
          length: 178,
          offset: 0,
          path: 'check-npm-versions.js',
          hash: '7f6009ada7f566cbcfa441c7950448410a091512',
          fileOptions: {}
        }, {
          type: 'source',
          extension: 'js',
          file: 'os/exports.js',
          length: 241,
          offset: 0,
          path: 'exports.js',
          hash: '85680aa23dc24bbd98196e191633a75fb7a46755',
          fileOptions: {
            mainModule: true
          }
        }, {
          type: 'source',
          extension: 'js',
          file: 'os/Baz.js',
          length: 8713,
          offset: 0,
          path: 'Baz.js',
          hash: 'f202d25ce0d36a2c3b7d5f5ac97b667ba4118aa9',
          fileOptions: {
            lazy: true
          }
        }]
      });

      _fs.default.__setFile(_path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foobar', '1.0.0', 'os', 'exports.js'), "\nexport const foobarsball = () => {};\nexport { foobarsballFunc } from './foobarsballFunc';\nexport * from './foobarNs';\n        ".trim());

      _fs.default.__setFile(_path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foobar', '1.0.0', 'os', 'foobarsballFunc.js'), "\nexport const foobarsballFunc = () => {};\nexport const notExportedFromModule = 'BAZ';\n        ".trim());

      _fs.default.__setFile(_path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foobar', '1.0.0', 'os', 'foobarNs.js'), "\nexport const foobarQux = () => {};\nexport function foobarQuux () {};\nconst foobarCorge = 'CORGE';\nexport { foobarCorge };\n        ".trim()); // local package jane:barbaz files


      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_barbaz', 'isopack.json'), {
        name: 'barbaz',
        summary: 'Metasyntactic package name #2',
        version: '0.0.1',
        isTest: false,
        'isopack-2': {
          builds: [{
            kind: 'main',
            arch: 'web.browser',
            path: 'web.browser.json'
          }]
        }
      });

      _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_barbaz', 'web.browser.json'), {
        format: 'isopack-2-unibuild',
        declaredExports: [],
        resources: [{
          type: 'source',
          extension: 'js',
          file: 'web.browser/check-npm-versions.js',
          length: 178,
          offset: 0,
          path: 'check-npm-versions.js',
          hash: '7f6009ada7f566cbcfa441c7950448410a091512',
          fileOptions: {}
        }, {
          type: 'source',
          extension: 'js',
          file: 'web.browser/main.js',
          length: 241,
          offset: 0,
          path: 'main.js',
          hash: '85680aa23dc24bbd98196e191633a75fb7a46755',
          fileOptions: {
            mainModule: true
          }
        }, {
          type: 'source',
          extension: 'js',
          file: 'web.browser/Baz.js',
          length: 8713,
          offset: 0,
          path: 'Baz.js',
          hash: 'f202d25ce0d36a2c3b7d5f5ac97b667ba4118aa9',
          fileOptions: {
            lazy: true
          }
        }]
      });

      _fs.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_barbaz', 'web.browser', 'main.js'), "\nexport const barbazsketball = () => {};\nexport { barbazsketballFunc } from './folder/barbazsketballFunc';\nexport * from './barbazNs';\n        ".trim());

      _fs.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_barbaz', 'web.browser', 'folder', 'barbazsketballFunc.js'), "\nexport const barbazsketballFunc = () => {};\nexport const notExportedFromModule = 'BAZ';\n        ".trim());

      _fs.default.__setFile(_path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_barbaz', 'web.browser', 'barbazNs.js'), "\nexport const barbazQux = () => {};\nexport function barbazQuux () {};\nconst barbazCorge = 'CORGE';\nexport { barbazCorge };\n        ".trim()); // Mock requireRelative. so it returns a path to our mocked modules


      _requireRelative.default.resolve.mockImplementation(function (module) {
        var resolvedPath = '';

        if (module === './barbazNs') {
          resolvedPath = _path.default.join(process.cwd(), '.meteor', 'local', 'isopacks', 'jane_barbaz', 'web.browser', 'barbazNs.js');
        } else if (module === './foobarNs') {
          resolvedPath = _path.default.join(_os.default.homedir(), '.meteor', 'packages', 'john_foobar', '1.0.0', 'os', 'foobarNs.js');
        }

        return resolvedPath;
      });
    });
    var expectedNamedExports = {
      // These namedExports are the core ones that are always returned for Meteor
      'meteor/accounts-base': ['AccountsClient', 'Accounts', 'AccountsServer'],
      'meteor/blaze': ['Blaze'],
      'meteor/check': ['check', 'Match'],
      'meteor/ddp-client': ['DDP'],
      'meteor/ddp-rate-limiter': ['DDPRateLimiter'],
      'meteor/ejson': ['EJSON'],
      'meteor/email': ['Email'],
      'meteor/http': ['HTTP'],
      'meteor/meteor': ['Meteor'],
      'meteor/mongo': ['Mongo'],
      'meteor/random': ['Random'],
      'meteor/reactive-var': ['ReactiveVar'],
      'meteor/session': ['Session'],
      'meteor/templating': ['Template'],
      'meteor/tracker': ['Tracker'],
      // These namedExports should be extracted from the Meteor metadata
      'meteor/john:foo': ['foosball'],
      'meteor/jane:bar': ['barsketball'],
      'meteor/john:foobar': ['foobarsball', 'foobarsballFunc', 'foobarQux', 'foobarQuux', 'foobarCorge'],
      'meteor/jane:barbaz': ['barbazsketball', 'barbazsketballFunc', 'barbazQux', 'barbazQuux', 'barbazCorge']
    };
    it('extracts namedExports and merges them into a single object', function () {
      expect(new _Configuration.default().get('namedExports')).toEqual(expectedNamedExports);
    });
    describe('with user defined namedExports', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['meteor'],
          namedExports: {
            'lib/utils': ['escape', 'hasKey']
          }
        });
      }); // Perhaps we will need this later.
      // it('has a deprecation message', () => {
      //   const configuration = new Configuration();
      //   expect(configuration.messages).toEqual([
      //     'Using namedExports to configure ImportJS is deprecated and will ' +
      //     'go away in a future version.',
      //   ]);
      // });

      it('merges user, meteor and found namedExports', function () {
        expect(new _Configuration.default().get('namedExports')).toEqual(_objectSpread({}, expectedNamedExports, {
          'lib/utils': ['escape', 'hasKey']
        }));
      });
    });
    describe('with mergableOptions.namedExports set to false', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['meteor'],
          namedExports: {
            'lib/utils': ['escape', 'hasKey']
          },
          mergableOptions: {
            namedExports: false
          }
        });
      });
      it('returns only user namedExports', function () {
        expect(new _Configuration.default().get('namedExports')).toEqual({
          'lib/utils': ['escape', 'hasKey']
        });
      });
    });
  });
  describe("#get('packageDependencies')", function () {
    it('returns an empty array', function () {
      expect(new _Configuration.default().get('packageDependencies')).toEqual(new Set([]));
    });
    describe('with dependencies', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'package.json'), {
          dependencies: {
            foo: '1.0.0',
            bar: '2.0.0'
          }
        });
      });
      it('returns an array of dependencies', function () {
        expect(new _Configuration.default().get('packageDependencies')).toEqual(new Set(['foo', 'bar']));
      });
    });
    describe('with dependencies and peerDependencies', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'package.json'), {
          dependencies: {
            foo: '1.0.0'
          },
          peerDependencies: {
            bar: '2.0.0'
          }
        });
      });
      it('returns an array of dependencies and peerDependencies', function () {
        expect(new _Configuration.default().get('packageDependencies')).toEqual(new Set(['foo', 'bar']));
      });
    });
    describe('with dependencies and devDependencies', function () {
      beforeEach(function () {
        _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'package.json'), {
          dependencies: {
            foo: '1.0.0'
          },
          devDependencies: {
            bar: '2.0.0'
          }
        });
      });
      it('leaves out devDependencies', function () {
        expect(new _Configuration.default().get('packageDependencies')).toEqual(new Set(['foo']));
      });
      describe('when importDevDependencies is true', function () {
        beforeEach(function () {
          _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
            importDevDependencies: true
          });
        });
        it('returns devDependencies as well', function () {
          expect(new _Configuration.default().get('packageDependencies')).toEqual(new Set(['foo', 'bar']));
        });
      });
    });
    describe('in Meteor environment with package dependencies', function () {
      beforeEach(function () {
        _fs.default.__setFile(_path.default.join(process.cwd(), '.meteor/packages'), "\n# comment to be ignored\n   john:foo-bar  # has leading white space\ncheck # core package to be ignored\njane:bar-foo@1.0.0   # version to be stripped\n          ".trim(), {
          isDirectory: function isDirectory() {
            return false;
          }
        });

        _FileUtils.default.__setFile(_path.default.join(process.cwd(), 'package.json'), {
          dependencies: {
            foo: '1.0.0',
            bar: '2.0.0'
          }
        });

        _FileUtils.default.__setFile(_path.default.join(process.cwd(), '.importjs.js'), {
          environments: ['meteor']
        });
      });
      it('returns an array of Meteor and npm dependencies', function () {
        expect(new _Configuration.default().get('packageDependencies')).toEqual(new Set(['meteor/john:foo-bar', 'meteor/jane:bar-foo', 'foo', 'bar']));
      });
    });
  });
});