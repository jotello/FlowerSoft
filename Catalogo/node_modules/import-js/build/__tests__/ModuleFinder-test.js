"use strict";

var _path = _interopRequireDefault(require("path"));

var _requireRelative = _interopRequireDefault(require("require-relative"));

var _ModuleFinder = _interopRequireDefault(require("../ModuleFinder"));

var _findPackageDependencies = _interopRequireDefault(require("../findPackageDependencies"));

var _lastUpdate = _interopRequireDefault(require("../lastUpdate"));

var _normalizePath = _interopRequireDefault(require("../normalizePath"));

var _readFile = _interopRequireDefault(require("../readFile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('../readFile');
jest.mock('../findPackageDependencies');
jest.mock('../lastUpdate');
var moduleFinder;

function addFiles(files) {
  return moduleFinder.handleFilesAdded(files.map(function (file) {
    return {
      path: (0, _normalizePath.default)(file, process.cwd()),
      mtime: Date.now()
    };
  }));
}

beforeEach(function () {
  _readFile.default.mockImplementation(function () {
    return Promise.resolve('export default {}');
  });

  _findPackageDependencies.default.mockImplementation(function () {
    return new Set(['pacman', 'react-packer', 'hoisted']);
  });

  _requireRelative.default.resolve = jest.fn();

  _requireRelative.default.resolve.mockImplementation(function (moduleName) {
    switch (moduleName) {
      case 'pacman':
        return _path.default.join(process.cwd(), '/node_modules/pacman/index.js');

      case 'react-packer':
        return _path.default.join(process.cwd(), '/node_modules/react-packer/index.js');

      case 'hoisted':
        return _path.default.resolve(process.cwd(), '../../node_modules/hoisted/index.js');

      default:
        throw new Error("Unknown dependency ".concat(moduleName));
    }
  });

  _lastUpdate.default.failSafe.mockImplementation(function (pathToFile) {
    return Promise.resolve({
      path: pathToFile,
      mtime: 1
    });
  });

  moduleFinder = _ModuleFinder.default.getForWorkingDirectory(process.cwd(), {
    excludes: [],
    ignorePackagePrefixes: ['react-']
  });
  return moduleFinder.initializeStorage(':memory:');
});
afterEach(function () {
  return moduleFinder.storage.close();
});
it('finds files', function () {
  return addFiles(['./foo/bar.js']).then(function () {
    return moduleFinder.find('bar').then(function (result) {
      expect(result).toEqual([{
        path: './foo/bar.js',
        name: 'bar',
        isDefault: true,
        isType: false,
        packageName: null
      }]);
    });
  });
});
it('finds package dependencies', function () {
  return addFiles(['./package.json']).then(function () {
    return moduleFinder.find('pacman').then(function (result) {
      expect(result).toEqual([{
        path: './node_modules/pacman/index.js',
        name: 'pacman',
        isDefault: true,
        isType: false,
        packageName: 'pacman'
      }]);
    });
  });
});
it('finds package dependencies not located in the local node_modules folder', function () {
  return addFiles(['./package.json']).then(function () {
    return moduleFinder.find('hoisted').then(function (result) {
      expect(result).toEqual([{
        path: '../../node_modules/hoisted/index.js',
        name: 'hoisted',
        isDefault: true,
        isType: false,
        packageName: 'hoisted'
      }]);
    });
  });
});
it('can ignore package prefixes', function () {
  return addFiles(['./package.json']).then(function () {
    return moduleFinder.find('packer').then(function (result) {
      expect(result).toEqual([{
        path: './node_modules/react-packer/index.js',
        name: 'packer',
        isDefault: true,
        isType: false,
        packageName: 'react-packer'
      }]);
    });
  });
});
it('matches over the last folder name', function () {
  return addFiles(['./Foo/bar.js']).then(function () {
    return moduleFinder.find('foobar').then(function (result) {
      expect(result).toEqual([{
        path: './Foo/bar.js',
        name: 'foobar',
        isDefault: true,
        isType: false,
        packageName: null
      }]);
    });
  });
});
it('knows about plural when matching over folder name', function () {
  return addFiles(['./Foos/bar.js']).then(function () {
    return moduleFinder.find('foobar').then(function (result) {
      expect(result).toEqual([{
        path: './Foos/bar.js',
        name: 'foobar',
        isDefault: true,
        isType: false,
        packageName: null
      }]);
    });
  });
});