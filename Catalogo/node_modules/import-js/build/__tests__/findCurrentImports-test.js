"use strict";

var _path = _interopRequireDefault(require("path"));

var _Configuration = _interopRequireDefault(require("../Configuration"));

var _findCurrentImports = _interopRequireDefault(require("../findCurrentImports"));

var _parse = _interopRequireDefault(require("../parse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var local = function local(subPath) {
  return _path.default.resolve(__dirname, subPath);
};

it('finds require statements', function () {
  var currentFileContent = "\nconst React = require('react');\n\nconst AlignmentRibbonPage = withMixpanelTracking(React.createClass({\n  render() {\n    return null;\n  }\n}));\n\nAlignmentRibbonPage.Controller = Controller({});\n\nmodule.exports = AlignmentRibbonPage;\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('react');
    expect(imp.declarationKeyword).toEqual('const');
  });
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(1);
});
it('finds import statements', function () {
  var currentFileContent = "\nimport React from 'react';\n\nconst AlignmentRibbonPage = withMixpanelTracking(React.createClass({\n  render() {\n    return null;\n  }\n}));\n\nAlignmentRibbonPage.Controller = Controller({});\n\nmodule.exports = AlignmentRibbonPage;\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('react');
    expect(imp.declarationKeyword).toEqual('import');
  });
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(1);
});
it('finds deconstructed import statements', function () {
  var currentFileContent = "\nimport { type foo, bar, type baz } from 'far';\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('far');
    expect(imp.declarationKeyword).toEqual('import');
    expect(imp.namedImports).toEqual([{
      localName: 'foo',
      isType: true
    }, {
      localName: 'bar',
      isType: false
    }, {
      localName: 'baz',
      isType: true
    }]);
    expect(imp.areOnlyTypes).toEqual(false);
    expect(imp.danglingCommas).toEqual(false);
  });
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(1);
});
it('preserves dangling commas', function () {
  var currentFileContent = "\nimport { foo, bar, } from 'far';\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('far');
    expect(imp.declarationKeyword).toEqual('import');
    expect(imp.danglingCommas).toEqual(true);
    expect(imp.namedImports).toEqual([{
      localName: 'foo',
      isType: false
    }, {
      localName: 'bar',
      isType: false
    }]);
    expect(imp.areOnlyTypes).toEqual(false);
  });
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(1);
});
it('preserves dangling commas when multiline', function () {
  var currentFileContent = "\nimport {\n  foo,\n  bar,\n} from 'far';\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('far');
    expect(imp.declarationKeyword).toEqual('import');
    expect(imp.danglingCommas).toEqual(true);
    expect(imp.namedImports).toEqual([{
      localName: 'foo',
      isType: false
    }, {
      localName: 'bar',
      isType: false
    }]);
    expect(imp.areOnlyTypes).toEqual(false);
  });
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(4);
});
it('finds single type import statement', function () {
  var currentFileContent = "\nimport type { foo } from 'far';\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('far');
    expect(imp.declarationKeyword).toEqual('import');
    expect(imp.namedImports).toEqual([{
      localName: 'foo',
      isType: true
    }]);
    expect(imp.areOnlyTypes).toEqual(true);
  });
});
it('finds multiple type imports statement', function () {
  var currentFileContent = "\nimport type { foo, bar } from 'far';\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('far');
    expect(imp.declarationKeyword).toEqual('import');
    expect(imp.namedImports).toEqual([{
      localName: 'foo',
      isType: true
    }, {
      localName: 'bar',
      isType: true
    }]);
    expect(imp.areOnlyTypes).toEqual(true);
  });
});
it('finds mixed imports statement', function () {
  var currentFileContent = "\nimport far, { type foo, bar } from 'far';\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('far');
    expect(imp.declarationKeyword).toEqual('import');
    expect(imp.defaultImport).toEqual('far');
    expect(imp.namedImports).toEqual([{
      localName: 'foo',
      isType: true
    }, {
      localName: 'bar',
      isType: false
    }]);
    expect(imp.areOnlyTypes).toEqual(false);
  });
});
it('finds deconstructed require statements', function () {
  var currentFileContent = "\nconst { foo, bar } = require('far');\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('far');
    expect(imp.danglingCommas).toBe(false);
    expect(imp.declarationKeyword).toEqual('const');
    expect(imp.namedImports).toEqual([{
      localName: 'foo'
    }, {
      localName: 'bar'
    }]);
  });
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(1);
});
it('preserves dangling commas in require statements', function () {
  var currentFileContent = "\nconst { foo, bar, } = require('far');\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  imports.imports.forEach(function (imp) {
    expect(imp.danglingCommas).toBe(true);
  });
});
it('finds namespace imports', function () {
  var currentFileContent = "\nimport * as api from './api'\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  imports.imports.forEach(function (imp) {
    expect(imp.path).toEqual('./api');
    expect(imp.declarationKeyword).toEqual('import');
    expect(imp.defaultImport).toEqual('api');
  });
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(1);
});
it('stops when it finds a non-import', function () {
  var currentFileContent = "\nconst Foo = Bar;\n\nconst Tar = require('tar');\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(0);
  expect(imports.range.start).toEqual(0);
  expect(imports.range.end).toEqual(0);
});
it("continues when it finds a 'use strict'", function () {
  var currentFileContent = "\n'use strict';\nconst Tar = require('tar');\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  expect(imports.range.start).toEqual(1);
  expect(imports.range.end).toEqual(2);
});
it("doesn't fail for assignment-less variable declarations", function () {
  var currentFileContent = 'let foo;';
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(0);
});
it('continues when it finds a comment', function () {
  var currentFileContent = "\n// comment\nconst Tar = require('tar');\n  ".trim();
  var imports = (0, _findCurrentImports.default)(new _Configuration.default('./foo.js'), currentFileContent, (0, _parse.default)(currentFileContent, local('foo.js')));
  expect(imports.imports.size()).toEqual(1);
  expect(imports.range.start).toEqual(1);
  expect(imports.range.end).toEqual(2);
});