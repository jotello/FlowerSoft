"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _findProjectRoot = _interopRequireDefault(require("../findProjectRoot"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('fs');
afterEach(function () {
  return _fs.default.__reset();
});
var normalPackageJsonContents = "{\n  \"name\": \"some-package\",\n  \"dependencies\": {\n\n  }\n}";
it('finds the right folders', function () {
  // FileUtils.__setFile(path.join(process.cwd(), '.importjs.js'), {
  _fs.default.__setFile(_path.default.join(_path.default.resolve('/'), 'foo', 'package.json'), normalPackageJsonContents);

  _fs.default.__setFile(_path.default.join(_path.default.resolve('/'), 'foo', 'bar', 'package.json'), normalPackageJsonContents);

  expect((0, _findProjectRoot.default)(_path.default.join(_path.default.resolve('/'), 'foo', 'bar', 'baz.js'))).toEqual(_path.default.join(_path.default.resolve('/'), 'foo', 'bar'));
});
it('treats package folders as roots', function () {
  _fs.default.__setFile(_path.default.join(_path.default.resolve('/'), 'foo', 'package.json'), normalPackageJsonContents);

  _fs.default.__setFile(_path.default.join(_path.default.resolve('/'), 'foo', 'node_modules', 'bar', 'package.json'), normalPackageJsonContents); // expect(findProjectRoot('/foo/node_modules/bar/baz/gaz.js')).toEqual(


  expect((0, _findProjectRoot.default)(_path.default.join(_path.default.resolve('/'), 'foo', 'node_modules', 'bar', 'baz', 'gaz.js'))).toEqual(_path.default.join(_path.default.resolve('/'), 'foo', 'node_modules', 'bar'));
});
it('throws if it can not find a folder', function () {
  expect(function () {
    return (0, _findProjectRoot.default)(_path.default.join('foo', 'bar', 'baz.js'));
  }).toThrowError('No project root found, looking for a directory with a package.json file.');
});
it('works for relative paths as well', function () {
  _fs.default.__setFile(_path.default.join(process.cwd(), _path.default.join('foo', 'package.json')), normalPackageJsonContents);

  expect((0, _findProjectRoot.default)(_path.default.join('foo', 'bar', 'baz.js'))).toEqual(_path.default.join(process.cwd(), 'foo'));
  expect((0, _findProjectRoot.default)(_path.default.join('.', 'foo', 'bar', 'baz.js'))).toEqual(_path.default.join(process.cwd(), 'foo'));
});
it('ignores directories in which the package.json specifies "importjs": { "isRoot": false }', function () {
  _fs.default.__setFile(_path.default.join(_path.default.resolve('/'), 'foo', 'package.json'), normalPackageJsonContents);

  _fs.default.__setFile(_path.default.join(_path.default.resolve('/'), 'foo', 'bar', 'package.json'), "{\n    \"name\": \"not-root\",\n    \"dependencies\": {\n\n    },\n    \"importjs\": {\n      \"isRoot\": false\n    }\n  }");

  expect((0, _findProjectRoot.default)(_path.default.join('/', 'foo', 'bar', 'baz.js'))).toEqual(_path.default.join(_path.default.resolve('/'), 'foo'));
});