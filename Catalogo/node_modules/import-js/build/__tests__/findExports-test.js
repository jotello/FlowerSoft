"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _requireRelative = _interopRequireDefault(require("require-relative"));

var _findExports = _interopRequireDefault(require("../findExports"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('fs');
jest.mock('require-relative');
beforeEach(function () {
  _fs.default.__reset();
});
it('finds no exports from export-less modules', function () {
  expect((0, _findExports.default)("\n    console.log('boo!');\n  ")).toEqual({
    named: [],
    typed: [],
    hasDefault: false
  });
});
it('finds exports from json', function () {
  expect((0, _findExports.default)("\n    {\n      \"foo\": {\n        \"foobar\": 1\n      },\n      \"bar\": \"Brown's bar\"\n    }\n  ", '/path/to/file.json')).toEqual({
    named: ['foo', 'bar'],
    typed: [],
    hasDefault: true
  });
});
it('finds es6 exports', function () {
  expect((0, _findExports.default)("\n    import { foo1, foo2 } from 'foo';\n    export default function notRelevant() {};\n    const bar = {};\n    const car = 'volvo';\n    export { bar, car as racecar };\n    export let baz = 'baz';\n    export { foo1 as bar1, foo2 as bar2 };\n    export * as ns from './foo';\n    export const { haa, faa } = tor();\n    export const { har, faa: far } = tor();\n    export const { has, fas = {a:1,b:2} } = tor();\n    export const { hat, faa: fat = {a:1,b:2} } = tor();\n    export const { hax, ...fax } = tor();\n    export const [ hay, fay ] = tor();\n    export const [ haz, ...faz ] = tor();\n    export const hooli = 'facebook';\n    export function yo() {};\n    export class Foo {}\n    export type Yak = string;\n    export type Yik<A, B, C> = {\n      property: A,\n      method(val: B): C,\n    };\n  ")).toEqual({
    named: ['bar', 'racecar', 'baz', 'bar1', 'bar2', 'ns', 'haa', 'faa', 'har', 'far', 'has', 'fas', 'hat', 'fat', 'hax', 'fax', 'hay', 'fay', 'haz', 'faz', 'hooli', 'yo', 'Foo'],
    typed: ['Yak', 'Yik'],
    hasDefault: true
  });
});
it('finds renamed es6 default export', function () {
  expect((0, _findExports.default)("\n    import { foo1, foo2 } from 'foo';\n    export { foo1 as default, foo2 };\n  ")).toEqual({
    named: ['default', 'foo2'],
    typed: [],
    hasDefault: true
  });
});
it('does not blow up on object spreads', function () {
  expect((0, _findExports.default)("\n    const foo = { ...bar, baz: true };\n  ")).toEqual({
    named: [],
    typed: [],
    hasDefault: false
  });
});
it('finds CommonJS exports', function () {
  expect((0, _findExports.default)("\n    const bar = function() {};\n    module.exports = {\n      foo: 'abc',\n      bar,\n      123: '123',\n    }\n    module.exports.car = 'volvo';\n  ")).toEqual({
    named: ['foo', 'bar', 'car'],
    typed: [],
    hasDefault: true
  });
});
it('finds CommonJS exports not using the "module" prefix', function () {
  expect((0, _findExports.default)("\n    const bar = function() {};\n    exports = {\n      foo: 'abc',\n      bar,\n      123: '123',\n    }\n    exports.car = 'volvo';\n  ")).toEqual({
    named: ['foo', 'bar', 'car'],
    typed: [],
    hasDefault: true
  });
});
it('finds CommonJS exports using `exports.use`', function () {
  // This is from chai
  // https://github.com/chaijs/chai/blob/dcd5baa34a/lib/chai.js#L85
  expect((0, _findExports.default)("\n    var should = function() {};\n    exports.use(should);\n    var nothing = function() {};\n    exports.somethingElse(nothing);\n  ")).toEqual({
    named: ['should'],
    typed: [],
    hasDefault: false
  });
});
it('does not fail on empty variable declarations', function () {
  expect((0, _findExports.default)("\n    let bar;\n    bar = 'keyzar';\n  ")).toEqual({
    named: [],
    typed: [],
    hasDefault: false
  });
});
it('finds CommonJS exports defined earlier in the file', function () {
  expect((0, _findExports.default)("\n    const haha = {\n      foo: 'abc',\n      bar: 'xyz',\n    }\n    module.exports = haha;\n  ")).toEqual({
    named: ['foo', 'bar'],
    typed: [],
    hasDefault: true
  });
});
it('does not fail on CommonJS exports defined earlier as functions', function () {
  expect((0, _findExports.default)("\n    function haha() {};\n    module.exports = haha;\n  ")).toEqual({
    named: [],
    typed: [],
    hasDefault: true
  });
});
it('finds CommonJS exports defined later in the file', function () {
  expect((0, _findExports.default)("\n    const haha = {};\n    module.exports = haha;\n    haha.foo = 'abc';\n    haha.bar = 'xyz';\n  ")).toEqual({
    named: ['foo', 'bar'],
    typed: [],
    hasDefault: true
  });
});
it('finds exports defined through Object.defineProperty', function () {
  expect((0, _findExports.default)("\n    Object.defineProperty(exports, 'foo', {\n      enumerable: true,\n      get: function get() {\n        return 'foo';\n      }\n    });\n    const shadow = exports;\n    Object.defineProperty(shadow, 'bar', {\n      enumerable: true,\n      get: function get() {\n        return 'bar';\n      }\n    });\n  ")).toEqual({
    named: ['foo', 'bar'],
    typed: [],
    hasDefault: true
  });
});
it('finds CommonJS exports in a root, self-executing, function', function () {
  expect((0, _findExports.default)("\n    (function () {\n      module.exports = { foo: 'foo' };\n    }.call(this));\n\n  ")).toEqual({
    named: ['foo'],
    typed: [],
    hasDefault: true
  });
  expect((0, _findExports.default)("\n    (function () {\n      module.exports = { foo: 'foo' };\n    }());\n\n  ")).toEqual({
    named: ['foo'],
    typed: [],
    hasDefault: true
  });
});
it('finds inner CommonJS exports', function () {
  // this is from logpath
  expect((0, _findExports.default)("\n    (function (root, definition) {\n        \"use strict\";\n        if (typeof module === 'object' && module.exports) {\n            module.exports = definition();\n        }\n    }(this, function() {}));\n  ", '/path/to/file.js')).toEqual({
    named: [],
    typed: [],
    hasDefault: true
  });
});
it('finds exports when exports is reassigned', function () {
  // this is from winston
  expect((0, _findExports.default)("\n    var winston = exports;\n    winston.foo = 'bar';\n    exports.bar = 'foo';\n  ", '/path/to/file.js')).toEqual({
    named: ['foo', 'bar'],
    typed: [],
    hasDefault: true
  });
});
it('parses React correctly', function () {
  expect((0, _findExports.default)("\nvar React = {\n\n  // Modern\n\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    toArray: ReactChildren.toArray,\n    only: onlyChild\n  },\n\n  Component: ReactComponent,\n  PureComponent: ReactPureComponent,\n\n  createElement: createElement,\n  cloneElement: cloneElement,\n  isValidElement: ReactElement.isValidElement,\n\n  // Classic\n\n  PropTypes: ReactPropTypes,\n  createClass: ReactClass.createClass,\n  createFactory: createFactory,\n  createMixin: function (mixin) {\n    // Currently a noop. Will be used to validate and trace mixins.\n    return mixin;\n  },\n\n  // This looks DOM specific but these are actually isomorphic helpers\n  // since they are just generating DOM strings.\n  DOM: ReactDOMFactories,\n\n  version: ReactVersion,\n\n  // Deprecated hook for JSX spread, don't use this for anything.\n  __spread: __spread\n};\n\nmodule.exports = React;\n\n  ")).toEqual({
    named: ['Children', 'Component', 'PureComponent', 'createElement', 'cloneElement', 'isValidElement', 'PropTypes', 'createClass', 'createFactory', 'createMixin', 'DOM', 'version', '__spread'],
    typed: [],
    hasDefault: true
  });
});
it('finds underscore exports', function () {
  expect((0, _findExports.default)("\n    (function() {\n      var _ = function() {};\n\n      if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n          exports = module.exports = _;\n        }\n        exports._ = _;\n      } else {\n        root._ = _;\n      }\n\n      _.debounce = function() {};\n      _.pluck = function() {};\n    })();\n  ")).toEqual({
    named: ['debounce', 'pluck'],
    typed: [],
    hasDefault: true
  });
});
it('finds exports from a webpack bundle', function () {
  // This is a downsized minimal webpack bundle
  expect((0, _findExports.default)("\n module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ })\n/******/ ({\n/***/ 521:\n/***/ (function(module, exports, __webpack_require__) {\n\"use strict\";\nexports.Foo = bar;\nexports.default = something;\nexports.createPath = exports.parsePath = exports.getQueryStringValueFromPath = exports.stripQueryStringValueFromPath = exports.addQueryStringValueToPath = undefined;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Foo = Foo.default;\n/***/ })\n/******/ });\n    ")).toEqual({
    named: ['Foo'],
    typed: [],
    hasDefault: true
  });
});
it('does not fail for inner exports that are not objects', function () {
  expect((0, _findExports.default)("\n    (function() {\n      var snowden = '';\n\n      if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n          exports = module.exports = snowden;\n        }\n      }\n    })();\n  ")).toEqual({
    named: [],
    typed: [],
    hasDefault: true
  });
});
it('finds typescript exports', function () {
  expect((0, _findExports.default)('export type FooType = {}; export interface FooInterface {}; export enum FooEnum {};', '/path/to/file.ts')).toEqual({
    named: ['FooType', 'FooInterface', 'FooEnum'],
    typed: [],
    hasDefault: false
  });
});
describe('recursive exports', function () {
  beforeEach(function () {
    _fs.default.__setFile('/path/to/foo.js', 'const Result = { bar: 123 }; module.exports = Result;', {
      isDirectory: function isDirectory() {
        return false;
      }
    });

    _requireRelative.default.resolve.mockImplementation(function () {
      return '/path/to/foo.js';
    });
  });
  it('follows exported requires', function () {
    expect((0, _findExports.default)("module.exports = require('./foo');", '/path/to/file.js')).toEqual({
      named: ['bar'],
      typed: [],
      hasDefault: true
    });
  });
  it('picks the first require if inside a ternary', function () {
    expect((0, _findExports.default)("\n        module.exports = process.env.NODE_ENV === 'test' ?\n          require('./foo') : require('./ignored');\n      ", '/path/to/file.js')).toEqual({
      named: ['bar'],
      typed: [],
      hasDefault: true
    });
  });
});
describe('recursive ES6 exports', function () {
  beforeEach(function () {
    _fs.default.__setFile('/path/to/foo.js', 'const foo = "42"; export const bar = 123; export { foo };', {
      isDirectory: function isDirectory() {
        return false;
      }
    });

    _requireRelative.default.resolve.mockImplementation(function () {
      return '/path/to/foo.js';
    });
  });
  it('follows exported * from', function () {
    expect((0, _findExports.default)("export * from './foo';", '/path/to/file.js')).toEqual({
      named: ['bar', 'foo'],
      typed: [],
      hasDefault: false
    });
  });
});