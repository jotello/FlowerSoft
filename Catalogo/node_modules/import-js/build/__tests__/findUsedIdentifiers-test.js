"use strict";

var _path = _interopRequireDefault(require("path"));

var _findUsedIdentifiers = _interopRequireDefault(require("../findUsedIdentifiers"));

var _parse = _interopRequireDefault(require("../parse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var local = function local(subPath) {
  return _path.default.resolve(__dirname, subPath);
};

it('finds used variables', function () {
  expect((0, _findUsedIdentifiers.default)((0, _parse.default)("\n    api.something();\n    const foo = 'foo';\n    foo();\n    bar();\n  ", local('foo.js')))).toEqual(new Set(['api', 'foo', 'bar']));
});
it('knows about jsx', function () {
  expect((0, _findUsedIdentifiers.default)((0, _parse.default)("\n    <Foo bar={far.foo()}/>\n  ", local('foo.jsx')))).toEqual(new Set(['far', 'React', 'Foo']));
});
it('knows about flow annotations', function () {
  expect((0, _findUsedIdentifiers.default)((0, _parse.default)("\n    class Foo {\n      bar: Car;\n    }\n  ", local('foo.js')))).toEqual(new Set(['Car']));
});
it('knows about export declarations', function () {
  expect((0, _findUsedIdentifiers.default)((0, _parse.default)("\n        export { foo as bar }\n        export { baz }\n  ", local('foo.js')))).toEqual(new Set(['foo', 'baz']));
});
it('treats items in arrays as used', function () {
  expect((0, _findUsedIdentifiers.default)((0, _parse.default)("\n    [Foo, Bar]\n  ", local('foo.js')))).toEqual(new Set(['Foo', 'Bar']));
});
it('treats items used as arguments as used', function () {
  expect((0, _findUsedIdentifiers.default)((0, _parse.default)("\n    foo(Foo, Bar);\n  ", local('foo.js')))).toEqual(new Set(['foo', 'Foo', 'Bar']));
});