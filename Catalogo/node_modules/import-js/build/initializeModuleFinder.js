"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = initializeModuleFinder;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _Configuration = _interopRequireDefault(require("./Configuration"));

var _ModuleFinder = _interopRequireDefault(require("./ModuleFinder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REQUIRED_FILES = ['.importjs.js', 'package.json'];
var alreadyInitializedFinders = new Set();

function checkWorkingDirectory(workingDirectory) {
  return new Promise(function (resolve, reject) {
    if (REQUIRED_FILES.some(function (file) {
      return _fs.default.existsSync(_path.default.join(workingDirectory, file));
    })) {
      // We're in a good place
      resolve();
      return;
    } // It's possible that this folder is the home folder. If we enable the
    // ModuleFinder here, we're going to have too many files to deal with.


    reject(new Error("ModuleFinder is disabled for ".concat(workingDirectory, " ") + "(none of ".concat(REQUIRED_FILES.join(', '), " were found).")));
  });
}

function initializeModuleFinder() {
  var workingDirectory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
  var config = new _Configuration.default('importjs', workingDirectory);

  var moduleFinder = _ModuleFinder.default.getForWorkingDirectory(workingDirectory, {
    excludes: config.get('excludes'),
    ignorePackagePrefixes: config.get('ignorePackagePrefixes')
  });

  if (alreadyInitializedFinders.has(moduleFinder)) {
    return Promise.resolve({});
  }

  alreadyInitializedFinders.add(moduleFinder);
  return new Promise(function (resolve, reject) {
    checkWorkingDirectory(workingDirectory).then(function () {
      return moduleFinder.initializeStorage(config.get('cacheLocation'));
    }).then(function (_ref) {
      var isFreshInstall = _ref.isFreshInstall;
      return moduleFinder.startWatcher().then(function () {
        resolve({
          isFreshInstall: isFreshInstall
        });
      });
    }).catch(reject);
  });
}