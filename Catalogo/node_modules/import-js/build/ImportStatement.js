"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function isLineTooLong(line, maxLineLength) {
  return !!maxLineLength && line.length > maxLineLength;
}

function equalsAndValue(_ref) {
  var declarationKeyword = _ref.declarationKeyword,
      importFunction = _ref.importFunction,
      path = _ref.path;

  if (declarationKeyword === 'import') {
    return {
      equals: 'from',
      value: "'".concat(path, "';")
    };
  }

  return {
    equals: '=',
    value: "".concat(importFunction || 'require', "('").concat(path, "');")
  };
}
/**
 * Class that represents an import statement, e.g.
 * `const foo = require('foo');`
 * `var foo = myCustomRequire('foo');`
 * `import foo from 'foo';`
 */


var ImportStatement =
/*#__PURE__*/
function () {
  // true if namedImports are all 'type' imports
  function ImportStatement() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        assignment = _ref2.assignment,
        declarationKeyword = _ref2.declarationKeyword,
        hasTypeKeyword = _ref2.hasTypeKeyword,
        defaultImport = _ref2.defaultImport,
        hasSideEffects = _ref2.hasSideEffects,
        importFunction = _ref2.importFunction,
        _ref2$namedImports = _ref2.namedImports,
        namedImports = _ref2$namedImports === void 0 ? [] : _ref2$namedImports,
        _ref2$areOnlyTypes = _ref2.areOnlyTypes,
        areOnlyTypes = _ref2$areOnlyTypes === void 0 ? false : _ref2$areOnlyTypes,
        originalImportString = _ref2.originalImportString,
        leadingContent = _ref2.leadingContent,
        path = _ref2.path,
        _ref2$danglingCommas = _ref2.danglingCommas,
        danglingCommas = _ref2$danglingCommas === void 0 ? true : _ref2$danglingCommas;

    _classCallCheck(this, ImportStatement);

    this.assignment = assignment;
    this.declarationKeyword = declarationKeyword;
    this.hasTypeKeyword = hasTypeKeyword;
    this.defaultImport = defaultImport;
    this.hasSideEffects = hasSideEffects;
    this.importFunction = importFunction;
    this.namedImports = namedImports;
    this.areOnlyTypes = areOnlyTypes;
    this.originalImportString = originalImportString;
    this.leadingContent = leadingContent;
    this.path = path;
    this.danglingCommas = danglingCommas;
  }

  _createClass(ImportStatement, [{
    key: "hasVariable",
    value: function hasVariable(variableName) {
      if (variableName === this.defaultImport) {
        return true;
      }

      return !!this.namedImports.find(function (_ref3) {
        var localName = _ref3.localName;
        return localName === variableName;
      });
    }
    /**
     * Deletes a variable from an already existing default import or set of
     * named imports.
     */

  }, {
    key: "deleteVariable",
    value: function deleteVariable(variableName) {
      var touched = false;

      if (this.defaultImport === variableName) {
        delete this.defaultImport;
        touched = true;
      }

      if (this.hasNamedImports()) {
        var variableIndex = this.namedImports.findIndex(function (_ref4) {
          var localName = _ref4.localName;
          return localName === variableName;
        });

        if (variableIndex !== -1) {
          this.namedImports.splice(variableIndex, 1);
          touched = true;
        }
      }

      if (touched) {
        this._clearImportStringCache();
      }
    }
    /**
     * @return {Boolean} true if there are named imports
     */

  }, {
    key: "hasNamedImports",
    value: function hasNamedImports() {
      return !!this.namedImports && this.namedImports.length > 0;
    }
    /**
     * @return {Boolean} true if there is no default import, no named imports, and
     *   no side effects.
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !this.defaultImport && !this.hasNamedImports() && !this.hasSideEffects;
    }
    /**
     * @return {Boolean} true if this instance was created through parsing an
     *   existing import and it hasn't been altered since it was created.
     */

  }, {
    key: "isParsedAndUntouched",
    value: function isParsedAndUntouched() {
      return !!this.originalImportString;
    }
    /**
     * @return {Array} an array that can be used in `sort` and `uniq`
     */

  }, {
    key: "toNormalized",
    value: function toNormalized() {
      if (!this.defaultImport && !this.hasNamedImports() && this.hasSideEffects) {
        return [this.path];
      }

      return [this.defaultImport || ''].concat(_toConsumableArray(this.localNames()));
    }
  }, {
    key: "localNames",
    value: function localNames() {
      if (!this.namedImports) {
        return [];
      }

      return this.namedImports.map(function (_ref5) {
        var localName = _ref5.localName;
        return localName;
      });
    }
    /**
     * @return {Array<String>} Array of all variables that this ImportStatement
     *   imports.
     */

  }, {
    key: "variables",
    value: function variables() {
      return [this.defaultImport].concat(_toConsumableArray(this.localNames())).filter(Boolean);
    }
  }, {
    key: "toImportStrings",
    value: function toImportStrings(maxLineLength, tab) {
      var strings = this._importStrings(maxLineLength, tab);

      if (this.leadingContent && strings.length > 0) {
        strings[0] = this.leadingContent + strings[0];
      }

      return strings;
    }
  }, {
    key: "_importStrings",
    value: function _importStrings(maxLineLength, tab) {
      if (this.originalImportString) {
        return [this.originalImportString];
      }

      if (this.hasSideEffects && !this.hasNamedImports() && !this.defaultImport) {
        // this is a side-effect import only
        return [this._assignmentLessImportString()];
      }

      if (this.declarationKeyword === 'import') {
        // ES2015 Modules (ESM) syntax can support default imports and
        // named imports on the same line.
        if (this.hasNamedImports()) {
          return [this._namedImportString(maxLineLength, tab)];
        }

        return [this._defaultImportString(maxLineLength, tab)];
      } // const/var


      var strings = [];

      if (this.defaultImport) {
        strings.push(this._defaultImportString(maxLineLength, tab));
      }

      if (this.hasNamedImports()) {
        strings.push(this._namedImportString(maxLineLength, tab));
      }

      return strings;
    }
    /**
     * Merge another ImportStatement into this one.
     */

  }, {
    key: "merge",
    value: function merge(importStatement) {
      var _this = this;

      if (importStatement.defaultImport && this.defaultImport !== importStatement.defaultImport) {
        this.defaultImport = importStatement.defaultImport;

        this._clearImportStringCache();
      }

      if (importStatement.hasSideEffects && this.hasSideEffects !== importStatement.hasSideEffects) {
        // If a module is ever thought to have side-effects, then assume it does.
        this.hasSideEffects = true;

        this._clearImportStringCache();
      }

      if (importStatement.hasNamedImports()) {
        this.namedImports = this.namedImports || [];
        var originalNamedImports = this.namedImports.slice(0); // clone array

        var modified = false;
        importStatement.namedImports.forEach(function (named) {
          var namedImport = originalNamedImports.find(function (_ref6) {
            var localName = _ref6.localName;
            return localName === named.localName;
          });

          if (!namedImport) {
            _this.namedImports.push(named);

            modified = true;

            if (_this.areOnlyTypes && !named.isType) {
              _this.areOnlyTypes = false;
            }
          }
        });

        if (modified) {
          this.namedImports.sort(function (a, b) {
            if (a.localName < b.localName) {
              return -1;
            }

            if (a.localName > b.localName) {
              return 1;
            }

            return 0;
          });

          this._clearImportStringCache();
        }
      }

      if (this.declarationKeyword !== importStatement.declarationKeyword) {
        this.declarationKeyword = importStatement.declarationKeyword;

        this._clearImportStringCache();
      }
    }
  }, {
    key: "_assignmentLessImportString",
    value: function _assignmentLessImportString() {
      if (this.declarationKeyword === 'import') {
        return "import '".concat(this.path, "';");
      }

      return "".concat(this.importFunction || 'require', "('").concat(this.path, "');");
    }
  }, {
    key: "_defaultImportString",
    value: function _defaultImportString(maxLineLength, tab) {
      var _equalsAndValue = equalsAndValue({
        declarationKeyword: this.declarationKeyword,
        importFunction: this.importFunction,
        path: this.path
      }),
          equals = _equalsAndValue.equals,
          value = _equalsAndValue.value;

      var line = "".concat(this.declarationKeyword || '', " ").concat(this.defaultImport || '', " ").concat(equals, " ").concat(value);

      if (!isLineTooLong(line, maxLineLength)) {
        return line;
      }

      return "".concat(this.declarationKeyword || '', " ").concat(this.defaultImport || '', " ").concat(equals, "\n").concat(tab).concat(value);
    }
  }, {
    key: "_namedImportString",
    value: function _namedImportString(maxLineLength, tab) {
      var _this2 = this;

      var _equalsAndValue2 = equalsAndValue({
        declarationKeyword: this.declarationKeyword,
        importFunction: this.importFunction,
        path: this.path
      }),
          equals = _equalsAndValue2.equals,
          value = _equalsAndValue2.value;

      var prefix = '';

      if (this.declarationKeyword === 'import') {
        if (this.defaultImport) {
          prefix = "".concat(this.defaultImport, ", ");
        } else if (this.areOnlyTypes) {
          prefix = 'type ';
        }
      }

      var named = this.namedImports.map(function (_ref7) {
        var localName = _ref7.localName,
            importedName = _ref7.importedName,
            isType = _ref7.isType;
        var typePrefix = isType && (!_this2.areOnlyTypes || _this2.defaultImport) ? 'type ' : '';

        if (!importedName) {
          return "".concat(typePrefix).concat(localName);
        }

        return "".concat(typePrefix).concat(importedName, " as ").concat(localName);
      });
      var namedOneLine = "{ ".concat(named.join(', '), " }");
      var line = "".concat(this.declarationKeyword || '', " ").concat(prefix).concat(namedOneLine, " ").concat(equals, " ").concat(value);

      if (!isLineTooLong(line, maxLineLength)) {
        return line;
      }

      var tabJoined = named.join(",\n".concat(tab));
      var namedMultiLine = "{\n".concat(tab).concat(tabJoined).concat(this.danglingCommas ? ',' : '', "\n}");
      return "".concat(this.declarationKeyword || '', " ").concat(prefix).concat(namedMultiLine, " ").concat(equals, " ").concat(value);
    }
  }, {
    key: "_clearImportStringCache",
    value: function _clearImportStringCache() {
      delete this.originalImportString;
    }
  }]);

  return ImportStatement;
}();

exports.default = ImportStatement;