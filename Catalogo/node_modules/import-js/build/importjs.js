"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = importjs;

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

var _Configuration = _interopRequireDefault(require("./Configuration"));

var _Importer = _interopRequireDefault(require("./Importer"));

var _daemon = _interopRequireDefault(require("./daemon"));

var _findProjectRoot = _interopRequireDefault(require("./findProjectRoot"));

var _initializeLogging = _interopRequireDefault(require("./initializeLogging"));

var _initializeModuleFinder = _interopRequireDefault(require("./initializeModuleFinder"));

var _package = _interopRequireDefault(require("../package.json"));

var _program$command, _program$command2, _program$command3, _program$command4, _program$command5;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var pathToLogFile = _path.default.join(_os.default.tmpdir(), 'importjs.log');

(0, _initializeLogging.default)(pathToLogFile);

function stdoutWrite(str) {
  process.stdout.write("".concat(str, "\n"));
}

function stderrWrite(str) {
  process.stderr.write("".concat(str, "\n"));
}
/**
 * Grab lines from stdin or directly from the file.
 */


function getLines(pathToFile) {
  return new Promise(function (resolve, reject) {
    if (process.stdin.isTTY) {
      _fs.default.readFile(pathToFile, 'utf-8', function (err, fileContent) {
        if (err) {
          reject(err);
          return;
        }

        resolve(fileContent.split('\n'));
      });

      return;
    }

    var parts = [];
    process.stdin.resume();
    process.stdin.setEncoding('utf-8');
    process.stdin.on('data', function (data) {
      parts.push(data);
    });
    process.stdin.on('end', function () {
      resolve(parts.join('').split('\n'));
    });
  });
}
/**
 * Run a command/method on an importer instance
 */


function runCommand(executor, pathToFile, _ref) {
  var overwrite = _ref.overwrite;
  var workingDirectory = (0, _findProjectRoot.default)(pathToFile);
  return (0, _initializeModuleFinder.default)(workingDirectory).then(function () {
    return getLines(pathToFile).then(function (lines) {
      var importer = new _Importer.default(lines, pathToFile, workingDirectory);
      return executor(importer).then(function (result) {
        if (overwrite) {
          _fs.default.writeFile(pathToFile, result.fileContent, function (err) {
            if (err) throw err;
            process.exit(0);
          });
        } else {
          stdoutWrite(JSON.stringify(result));
          process.exit(0);
        }
      });
    });
  }).catch(function (error) {
    stderrWrite(error.message);
    process.exit(1);
  });
}

_commander.default.version(_package.default.version); // Some options that are shared by multiple commands


var sharedOptions = {
  overwrite: ['--overwrite', 'overwrite the file with the result after importing']
};

(_program$command = _commander.default.command('word <word> <pathToFile>')).option.apply(_program$command, _toConsumableArray(sharedOptions.overwrite)).action(function (word, pathToFile, options) {
  var executor = function executor(importer) {
    return importer.import(word);
  };

  runCommand(executor, pathToFile, options);
});

(_program$command2 = _commander.default.command('search <word> <pathToFile>')).option.apply(_program$command2, _toConsumableArray(sharedOptions.overwrite)).action(function (word, pathToFile, options) {
  var executor = function executor(importer) {
    return importer.search(word).then(function (_ref2) {
      var modules = _ref2.modules;
      return modules;
    });
  };

  runCommand(executor, pathToFile, options);
});

(_program$command3 = _commander.default.command('fix <pathToFile>')).option.apply(_program$command3, _toConsumableArray(sharedOptions.overwrite)).action(function (pathToFile, options) {
  var executor = function executor(importer) {
    return importer.fixImports();
  };

  runCommand(executor, pathToFile, options);
});

(_program$command4 = _commander.default.command('rewrite <pathToFile>')).option.apply(_program$command4, _toConsumableArray(sharedOptions.overwrite)).action(function (pathToFile, options) {
  var executor = function executor(importer) {
    return importer.rewriteImports();
  };

  runCommand(executor, pathToFile, options);
});

(_program$command5 = _commander.default.command('add <imports> <pathToFile>')).option.apply(_program$command5, _toConsumableArray(sharedOptions.overwrite)).action(function (imports, pathToFile, options) {
  var executor = function executor(importer) {
    return importer.addImports(JSON.parse(imports));
  };

  runCommand(executor, pathToFile, options);
});

_commander.default.command('goto <word> <pathToFile>').action(function (word, pathToFile) {
  var workingDirectory = (0, _findProjectRoot.default)(pathToFile);
  (0, _initializeModuleFinder.default)(workingDirectory).then(function () {
    return getLines(pathToFile).then(function (lines) {
      new _Importer.default(lines, pathToFile, workingDirectory).goto(word).then(function (result) {
        stdoutWrite(JSON.stringify(result));
        process.exit(0);
      });
    });
  }).catch(function (error) {
    stderrWrite(error.message);
    process.exit(1);
  });
});

_commander.default.command('start').description('start a daemon').option('--parent-pid <n>', parseInt).action(function (_ref3) {
  var parentPid = _ref3.parentPid;
  _initializeLogging.default.parentPid = parentPid;
  (0, _daemon.default)(parentPid, pathToLogFile);
});

_commander.default.command('cachepath').description('show path to cache file').action(function () {
  stdoutWrite(new _Configuration.default('importjs').get('cacheLocation'));
});

_commander.default.command('logpath').description('show path to log file').action(function () {
  stdoutWrite(pathToLogFile);
});

_commander.default.on('--help', function () {
  var examples = ['word someModule path/to/file.js', 'search someModule* path/to/file.js', 'fix path/to/file.js', 'rewrite --overwrite path/to/file.js', 'add \'{ "foo": "path/to/foo", "bar": "path/to/bar" }\' path/to/file.js', 'goto someModule path/to/file.js', 'cachepath', 'logpath', 'start --parent-pid=12345'];
  stdoutWrite('  Examples:');
  stdoutWrite('');
  examples.forEach(function (example) {
    stdoutWrite("    $ importjs ".concat(example));
  });
  stdoutWrite('');
});

function importjs(argv) {
  _commander.default.parse(argv);

  if (!argv.slice(2).length) {
    _commander.default.outputHelp();
  }
}