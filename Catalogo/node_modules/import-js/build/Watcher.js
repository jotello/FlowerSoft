"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fbWatchman = _interopRequireDefault(require("fb-watchman"));

var _minimatch = _interopRequireDefault(require("minimatch"));

var _winston = _interopRequireDefault(require("winston"));

var _ExportsStorage = _interopRequireDefault(require("./ExportsStorage"));

var _findAllFiles = _interopRequireDefault(require("./findAllFiles"));

var _normalizePath = _interopRequireDefault(require("./normalizePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SUBSCRIPTION_NAME = 'import-js-subscription';

var Watcher =
/*#__PURE__*/
function () {
  function Watcher(_ref) {
    var _ref$workingDirectory = _ref.workingDirectory,
        workingDirectory = _ref$workingDirectory === void 0 ? process.cwd() : _ref$workingDirectory,
        _ref$excludes = _ref.excludes,
        excludes = _ref$excludes === void 0 ? [] : _ref$excludes,
        _ref$onFilesAdded = _ref.onFilesAdded,
        onFilesAdded = _ref$onFilesAdded === void 0 ? function () {
      return Promise.resolve();
    } : _ref$onFilesAdded,
        _ref$onFilesRemoved = _ref.onFilesRemoved,
        onFilesRemoved = _ref$onFilesRemoved === void 0 ? function () {
      return Promise.resolve();
    } : _ref$onFilesRemoved,
        storage = _ref.storage;

    _classCallCheck(this, Watcher);

    // eslint-disable-line object-curly-newline
    this.workingDirectory = workingDirectory;
    this.excludes = excludes;
    this.onFilesAdded = onFilesAdded;
    this.onFilesRemoved = onFilesRemoved;
    this.storage = storage;
  }

  _createClass(Watcher, [{
    key: "subscribe",
    value: function subscribe(_ref2) {
      var _this = this;

      var client = _ref2.client,
          fbWatch = _ref2.fbWatch,
          relativePath = _ref2.relativePath;
      var subscription = {
        // Match javascript files
        expression: ['anyof', ['suffix', 'js'], ['suffix', 'jsx'], ['suffix', 'ts'], ['suffix', 'tsx'], ['suffix', 'json']],
        fields: ['name', 'exists', 'mtime_ms'],
        relative_root: relativePath
      };
      return new Promise(function (resolve, reject) {
        client.command(['subscribe', fbWatch, SUBSCRIPTION_NAME, subscription], function (error) {
          if (error) {
            reject(error);
            return;
          }

          resolve();
        });
        client.on('subscription', function (resp) {
          if (resp.subscription !== SUBSCRIPTION_NAME) {
            return;
          }

          var added = [];
          var removed = [];
          resp.files.forEach(function (file) {
            var normalizedPath = (0, _normalizePath.default)(file.name, _this.workingDirectory);

            if (normalizedPath.indexOf('/node_modules/') !== -1) {
              return;
            }

            if (_this.excludes.some(function (pattern) {
              return (0, _minimatch.default)(normalizedPath, pattern);
            })) {
              return;
            }

            if (file.exists) {
              added.push({
                path: normalizedPath,
                mtime: +file.mtime_ms
              });
            } else {
              removed.push({
                path: normalizedPath
              });
            }
          });

          if (added.length) {
            _this.onFilesAdded(added);
          }

          if (removed.length) {
            _this.onFilesRemoved(removed);
          }
        });
      });
    }
  }, {
    key: "startSubscription",
    value: function startSubscription(_ref3) {
      var _this2 = this;

      var client = _ref3.client;
      return new Promise(function (resolve, reject) {
        client.command(['watch-project', _this2.workingDirectory], function (error, resp) {
          if (error) {
            reject(error);
            return;
          }

          if ('warning' in resp) {
            _winston.default.warn("WARNING received during watchman init: ".concat(resp.warning));
          }

          _this2.subscribe({
            client: client,
            fbWatch: resp.watch,
            relativePath: resp.relative_path
          }).then(resolve).catch(reject);
        });
      });
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.initializeWatchman().then(resolve).catch(function (error) {
          _winston.default.warn("\n          Couldn't initialize the Watchman watcher. This is most likely because\n          you don't have Watchman installed. Follow instructions here if you\n          want to rid this warning:\n          https://facebook.github.io/watchman/docs/install.html\n\n          ImportJS will fall back to polling instead. This is slower, and more\n          resource-heavy. Plus, changes will not be immediately available.\n          \n\n          Reason: ".concat(error.message, "\n").concat(error.stack, "\n        "));

          _this3.initializePolling().then(resolve).catch(reject);
        });
      });
    }
    /**
     * Get all files from the watchman-powered cache. Returns a promise that will
     * resolve if watchman is available, and the file cache is enabled. Will
     * resolve immediately if previously initialized.
     */

  }, {
    key: "initializeWatchman",
    value: function initializeWatchman() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        var client = new _fbWatchman.default.Client();
        client.on('error', function (error) {
          reject(error);
        });
        client.capabilityCheck({
          optional: [],
          required: ['relative_root']
        }, function (error) {
          if (error) {
            client.end();
            reject(error);
          } else {
            _this4.startSubscription({
              client: client
            }).then(resolve).catch(reject);
          }
        });
      });
    }
  }, {
    key: "initializePolling",
    value: function initializePolling() {
      var _this5 = this;

      setInterval(function () {
        _this5.poll();
      }, 30000);
      return this.poll();
    }
  }, {
    key: "poll",
    value: function poll() {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        (0, _findAllFiles.default)(_this6.workingDirectory, _this6.excludes).then(function (files) {
          var mtimes = {};
          files.forEach(function (_ref4) {
            var pathToFile = _ref4.path,
                mtime = _ref4.mtime;
            mtimes[pathToFile] = mtime;
          });

          _this6.storage.allFiles().then(function (storedFiles) {
            var removedFiles = [];
            storedFiles.forEach(function (storedFile) {
              if (storedFile.startsWith('./node_modules/')) {
                // Ignore this file, as it won't be in the list of all files (we
                // exclude node_modules by default).
                return;
              }

              var mtime = mtimes[storedFile];

              if (!mtime) {
                removedFiles.push({
                  path: storedFile
                });
              }
            });

            _this6.onFilesAdded(files).then(function () {
              return _this6.onFilesRemoved(removedFiles);
            }).then(resolve).catch(reject);
          });
        }).catch(reject);
      });
    }
  }]);

  return Watcher;
}();

exports.default = Watcher;