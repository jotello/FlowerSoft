"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = daemon;

var _readline = _interopRequireDefault(require("readline"));

var _winston = _interopRequireDefault(require("winston"));

var _Importer = _interopRequireDefault(require("./Importer"));

var _findProjectRoot = _interopRequireDefault(require("./findProjectRoot"));

var _initializeModuleFinder = _interopRequireDefault(require("./initializeModuleFinder"));

var _version = _interopRequireDefault(require("./version"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var commandsToFunctionNames = {
  add: 'addImports',
  fix: 'fixImports',
  goto: 'goto',
  rewrite: 'rewriteImports',
  search: 'search',
  word: 'import'
};

function daemon(parentPid, pathToLogFile) {
  process.stdout.write("ImportJS (v".concat((0, _version.default)(), ") DAEMON active. Logs will go to: ").concat(pathToLogFile, "\n"));

  if (parentPid) {
    // Editor plugins should provide a `--parent-pid=<pid>` argument on startup,
    // so that we can check that the daemon process hasn't turned into a zombie
    // once in a while.
    setInterval(function () {
      _winston.default.debug("Making sure that the parent process (PID=".concat(parentPid, ") is still running."));

      try {
        process.kill(parentPid, 0);
      } catch (error) {
        _winston.default.info('Parent process seems to have died. Exiting.');

        process.exit(1);
      }
    }, 30000);
  }

  var rlInterface = _readline.default.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
  });

  rlInterface.on('line', function (jsonPayload) {
    _winston.default.debug("RECEIVED payload: ".concat(jsonPayload));

    var payload = JSON.parse(jsonPayload);
    var workingDirectory = (0, _findProjectRoot.default)(payload.pathToFile);

    _winston.default.debug("Using ".concat(workingDirectory, " as project root for ").concat(payload.pathToFile));

    var importer = new _Importer.default(payload.fileContent.split('\n'), payload.pathToFile, workingDirectory);
    var functionName = commandsToFunctionNames[payload.command];

    if (!functionName) {
      var errorString = "Unknown command: ".concat(payload.command, ". Valid ones are ").concat(Object.keys(commandsToFunctionNames).join(', '));

      _winston.default.error(errorString);

      var jsonResponse = JSON.stringify({
        error: errorString
      });
      process.stdout.write("".concat(jsonResponse, "\n"));
      return;
    }

    (0, _initializeModuleFinder.default)(workingDirectory).then(function (_ref) {
      var isFreshInstall = _ref.isFreshInstall;
      importer[functionName](payload.commandArg).then(function (result) {
        if (isFreshInstall) {
          result.messages.unshift("ImportJS is initializing for ".concat(workingDirectory, ". Results will be more accurate in a few moments."));
        }

        var jsonResponse = JSON.stringify(result);

        _winston.default.debug("SENDING response: ".concat(jsonResponse));

        process.stdout.write("".concat(jsonResponse, "\n"));
      }).catch(function (_ref2) {
        var message = _ref2.message,
            stack = _ref2.stack;
        var errorParts = [message];

        if (stack) {
          errorParts.push(stack);
        }

        var jsonResponse = JSON.stringify({
          error: errorParts.join('\n')
        });

        _winston.default.error("ERROR response: ".concat(jsonResponse));

        process.stdout.write("".concat(jsonResponse, "\n"));
      });
    });
  });
}